---
title: Nano Twitter Project Outline
---
#### Approximate Recipe

Each step in this recipe has a name which I use to refer to it elsehwee in this course.

* **[DBSCHEMA]** Design relational database schema (i.e. one for the whole app.) Decide what tables you will have, what the attributes (columns) are for each table, and what the associations are (i.e. one to many, many to one, many to many.)
* **[HTMLUI]** Design html, forms, and user interface. Start with a paper sketch for each page. Remember to note where there are links and buttons, and what the various text boxes are. You may use a tool like Balsamiq.com as well. No need to immitate the real twitter. Do whatever you want but make sure the functionality that is listed in <%= link_to_section :nt, :nt_functionality %> is covered.
* **[SINATRAAPP]** Implement Sinatra front end application for ui. Use ActiveRecord and Sqlite3 for development (local) db. You will use the sketches from [HTMLUI] to implement .html.erb files that in a view directory to display the views. Later when you deploy to heroku you will enable Postgress for your production (heroku) db.
* **[TESTSUITE]** Write complete set of unit tests with automation. Also include a few integration tests.
* **[SEEDDATA]** Implement a large body of seed data with automation. For each table in your database you want to populate it with real looking data. You can use the faker gem to give you real looking data.
* **[HEROKU]** Deploy to Heroku. Make sure tests still run.
* **[UIBOOTSTRAP]** Revise user interface to make it pretty, using Bootstrap
* **[APIROUTES]**Go back to the beginning Design external API urls. Implement them as further Sinatra routes.
* **[CLIENTLIB]**Write client libraries for your APIs.
* **[CLIENTLIBTEST]**Write a complete set of tests for them
* **[LOADTEST]** Investigate and choose a way to load test your app (see for example Loader.io)
* **[INSTRUMENT]**Investigate and choose a way to instrument your test app (see for example NewRelic)
* **[RUNLOADEXPERIMENT]**Design and run a series of load tests and write a report of your findings
* **[IMPROVESCHEMA]**Update your schema to put indeces and other enhancements and see the effect on scaling
* **[SWAPDATABASE]**Try different databases (SqlLite, Mysql, Postgres, Mongo) and see the effect on scaling
* **[SCALEEXPERIMENT]**Design and execute scaling experiments and see the differences
* **[REDIS]** Investigate and figure out how to setup a Redis Caching service
* **[CACHING]**Consider where to add caching and do some more experiments to see how scaling changes
* .... more to come !



