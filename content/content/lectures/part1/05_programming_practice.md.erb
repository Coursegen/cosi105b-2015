---
title: Good Practices
desc: How to get beyond disposable programs
homework: Read AND DO [POODR] Chapter 3; learn about "code smells" and point out two smells in your own solution to Movies-1
---
<%= homework_hdr %>
* Read [POODR] Chapter 3. Points to understand:
  * Gear and Wheel have several kinds of dependencies. What are they?
  * Why are dependencies bad?
  * How are things improved when (on page 41) wheel becomes an input to the initializer?
  * Why does she keep using the term "messages"?
  * What is dependency direction, how can it be changed, and how do you know which is preferred?
  * *You are required to do all the examples, by typing them in yourself and getting them to work. Remember that your work should be happening inside your <%= link_to_intro :portfolio %>.*
* Read about [Code Smells](http://martinfowler.com/bliki/CodeSmell.html). Examine your own <%= link_to_topic :pa_movies_1 %> and <%= deliverable "Point out two code smells." %>
* Begin working on <%= link_to_topic :pa_movies_2 %> in your <%= link_to_intro :portfolio %> like you did before

#### Homework discussion
* Questions I asked about POODR
* Reminder about the portfolio and how work there is graded

#### Good Programming
* Disposable code
  * Not designed
  * Incomprehensible 1 year, 1 month, 1 week later
  * Just barely works, no idea why
  * "write-only"
  * Long, ugly methods
  * Bad or meaningless naming

* Aesthetics
  * Like a 'beautiful proof' or an 'elegant argument'
  * Programming in the small or large can be beautiful
  * [Smelly code](http://martinfowler.com/bliki/CodeSmell.html) is ugly, lacks beauty, is inellegant.

* Smells and Slogans
  * DRY: "Do Not Repeat Yourself".
  * YAGNI: "You're Not Gonna Need It"

* Other basic hygene
  * What's the right amount of code commenting?
  * How important is proper formatting?
  * Why is naming important and what is it's connection to commenting?

* ['Sandy Metz' Rules](http://robots.thoughtbot.com/sandi-metz-rules-for-developers)
  * Classes can be no longer than 100 lines of code
  * Methods can be no longer than five lines of code
  * Pass no more than four parameters into a method
  * Controllers (Rails) can insantiate only one object. Therefore views can only know about one instance variable, and only send methods to that object. (@view_presenter.user.username is not allowed)

* Discussion about hard and fast rules

#### Next Class
* Look at homework: <%= link_to_next_lecture %>
