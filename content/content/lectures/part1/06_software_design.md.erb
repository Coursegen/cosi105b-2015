---
title: Software Design
---
* Read [POODR] Chapter 4. Points to understand:
  * Research and figure out why they are called "messages" and not just "calls". What's the distinction and nuance?
  * Bottom of page 67: "The problem is not that Customer should not send it, it's that Trip should not receive it." Why?
  * In this chapter she uses talks about the **context** of a class. What does she mean?
  * Can you explain the law of demeter? Or how do you recognize violations easily?
  * *You are required to do all the examples, by typing them in yourself and getting them to work. Remember that your work should be happening inside your <%= link_to_intro :portfolio %>.*


#### Homework Discussion
* Questions about the POODR reading

#### Higher Level Concepts
* Core
  * Decomposition
  * Abstraction
  * Information hiding
  * Decoupling
  * Are these all ways of saying the same thing?

* Why?
  * Aesthetics/Beauty/Sweet Smelling code - Not an end in themselves
  * They lead to: higher quality code
  * They lead to: code that is easier to modify/adapt to new requirements
  * They lead to: healthier code that doesn't get sick and decay as quickly

#### Decomposition
* A core **life** skill
* I want to get into grad school: what are the steps? How do I decompose the problem?
* You want to make an argument for something: what are the steps, how do I build a case?
* Outlines, hierarchy, dependencies
* For Software Design, decomposition is the central first step

#### Abstraction
* Programming is all about abstraction
* Understanding the important aspects of a problem, ignoring the rest
* 'Leaky Abstractions'

#### Information hiding
* "Inside" vs. "Outside", scales at many levels
* "What you don't know can't hurt you"

#### Next Class
* Look at homework: <%= link_to_next_lecture %>
