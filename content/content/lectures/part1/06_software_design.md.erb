---
title: Software Design
---
* Read [POODR] Chapters 4,5. Do all the examples. <%= deliverable "create a directory with all the typed in code from your readings. Zip it up and submit it." %>

#### Higher Level Concepts
* Core
  * Decomposition
  * Abstraction
  * Information hiding
  * Decoupling
  * Are these all ways of saying the same thing?
* Why?
  * Aesthetics/Beauty/Sweet Smelling code - Not an end in themselves
  * They lead to: higher quality code
  * They lead to: code that is easier to modify/adapt to new requirements
  * They lead to: healthier code that doesn't get sick and decay as quickly

#### Decomposition
* A core **life** skill
* I want to get into grad school: what are the steps? How do I decompose the problem?
* You want to make an argument for something: what are the steps, how do I build a case?
* Outlines, hierarchy, dependencies
* For Software Design, decomposition is the central first step

#### Abstraction
* Programming is all about abstraction
* Understanding the important aspects of a problem, ignoring the rest
* 'Leaky Abstractions'

#### Information hiding
* "Inside" vs. "Outside", scales at many levels
* "What you don't know can't hurt you"

#### Decoupling
* 