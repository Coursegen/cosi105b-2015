---
title: Patterns in Scaling
desc: Going deeper into scalability for nT
homework: Watch video, read article, write reflection
---
<%= homework_hdr %>
	* Watch: [Twitter Architecture](https://www.youtube.com/watch?v=VttXHNveuwI)
	* Read: [5 Early Lessons from Rapid, High Availability scaling with Rails](http://mikepackdev.com/blog_posts/40-5-early-lessons-from-rapid-high-availability-scaling-with-rails)(Don't be concerned that it says "Rails", almost all of it applies equally to Sinatra)

#### Notes
nt architecture, flow of HTTP through the system, bottlenecks,  Artificial Loads.

read this paper: http://www2.smartbear.com/rs/smartbear/images/webloadui-load-testing-101-1.pdf

#### nt Architecture Review

#### Network flow between components

#### Bottlenecks

#### Measuring

#### Artificial Loads
Look like good candidates: 
http://tsung.erlang-projects.org/index.en.html
http://jmeter.apache.org

#### Ruby Performance
https://github.com/ruby-prof/ruby-prof

# Doc
http://guides.rubyonrails.org/v3.2.13/performance_testing.html


<%= link_to_topic :scaling_techniques %>