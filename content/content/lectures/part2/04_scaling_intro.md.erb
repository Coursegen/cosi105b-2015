---
title: Intro to Scaling
---
<%= homework_hdr %>
* 

#### What causes a scaling problem

* simple slow performance, caused by bad design or not using your tools in an optimal way
* Bottlenecks
* Lack of concurrency

#### Action Plan
1. Start with a combined app server and database
2. See if you might need a bigger server
3. Separate out the database into its own dedicated box, since it'll be fighting for resources
4. Run more "app servers" (workers or processes)
Ensure you are scaling the unicorns or workers or processes that Apache, Nginx, Ruby can use. 
5. Maximize the resource usage on a box. Get Metrics(New Relic, Munin, Nagios) and monitor them often. 
6. Make sure you know how your traffic spikes and what trends you have in memory usage. You don't want to hit your caps on resources, otherwise the app will start thrashing.
1. Once you see one box does not cut it any longer add another server, you will need a load balancer for this. 
1. Adding another server, increases your redundancy. Depending on how valuable this app is and how badly it needs to stay up 2 app servers is a good idea, as well as 2 database servers, 1 primary and 1 follower on stand by. AWS RDS makes that last part easy.
1. Once you are there, you should be good for a while.
1. From this point you can start looking at running caching both at the app level to cache queries into memory, and at the server level by installing varnish, squid, or memcached.
1. Those last few things will help you cut down on database chatter and limit the number of queries that need to be run for your app to function.

#### Or
1. Improve performance by tuning or caching queries/persistent stores.
1. Increase # of workers (webservers, processes, threads, etc) to handle increased load.
1. Increasing workers results in having to scale up your bottleneck (the database/persistent store).
1. Partition out your most expensive use cases into services and scale them independently.


#### Additional Reading
* Interesting presentation about google's scaling: [Software Engineering Advice from Building Large-Scale Distributed Systems](http://static.googleusercontent.com/media/research.google.com/en/us/people/jeff/stanford-295-talk.pdf)
