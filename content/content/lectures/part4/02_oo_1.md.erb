---
title: Object Orientation
---
<%= homework_hdr %>
* Study [A library for OO thinking](http://c2.com/doc/oopsla89/paper.html). Consider a system to manage a small school's registration system. There are students, faculty, courses, registrations, semesters and so on. Design a set of CRC cards for that system. <%= deliverable "Take digital photos of your CRC cards, make sure they are legible, put them into a file with any explanations needed, and export to pdf. Submit it." %>
* Read [POODR] Chapter 5.
  * See if you can explain to yourself what she means with "Inheritance is at its core a mechanism for *automatic message delegation*. It defines a forwarding path for not-understood messages." Take your time.
  * If you 'got' the previous chapter, you saw many places in which a message (=method call) is 'delegated' to another class. Do you see the similarity and how delegation is related to inheritance?
  * The antipattern she mentions, putting a 'type' field in a class is a very common one. It is likely the first thing you think of. It is a major code smell telling you to look again at your design with the goal of eliminating the type. It's as bad as having a conditional checking if my class is "Mountain Bike", another major code smell.
  * Study to make sure you understand what she means by "The best way to create an abstract class is by pushing code up from concrete subclasses."
  * <%= deliverable "Write down three things that you didn't understand, and if you undertood it all, then three things you learned. Submit as pdf" %>
* Teams: You should start working on the deliverable for Monday because it will take some time.

#### Discussion
* Homework
  * What are the negative consequences of classes that have an instance variable (e.g. @kind_of_bike) to say what variant the class is?
  * Can you say what the "Template Method Pattern" is?

#### Practice design CRC Cards for
* Design the CRC cards for:
  * A system to reserve tickets at a venue, dealing with seats being free or assigned, what section they are in, allowing for different venues to have different layouts, representing performances using a venue etc
 
  #### Next Class
* Look at homework: <%= link_to_next_lecture %>