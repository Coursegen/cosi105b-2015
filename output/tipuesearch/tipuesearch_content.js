
var tipuesearch = { "pages": [

        {"title": "chalkmark", "text": "function handle_helpful_link(yesno) { $.ajax({ url:  http://chalkmark.herokuapp.com/api/helpful/vote/ , data: {url: document.title, value: yesno}, dataType:  jsonp , success: function(data) { display_visit_stats(data); }} )}; function display_visit_stats(response) { yes_votes = response.true; no_votes = response.false; if (yes_votes > 0 || no_votes > 0) { $( #helpful ).addClass( text-center ).html( votes so far: Yes:   + response.true +   No:   + response.false +   ); } } $( #yes-link ).click( function() { handle_helpful_link( yes );}); $( #no-link ).click( function() { handle_helpful_link( no );}); function record_visit() { $.ajax({ url:  http://chalkmark.herokuapp.com/api/helpful/visiting/ , data: {url: document.title}, dataType:  jsonp , success: function(data) { display_visit_stats(data) }} )}; $(function() { record_visit(); }); ", "tags": "", "loc": "/chalkmark/chalkmark.js" },

        {"title": "Welcome!", "text": " Software Engineering and Architecture At Scale Learn how large software teams build large systems. How does programming change when a system has thousands of modules and dozens of programmers? How do you ensure that the systems you build can evolve and grow? How do you put together an architecture that will survive an onslaught of 500,000 users or more? This course introduces you to concepts, principles, techniques and research that try to answer those questions. Pito Salas, pitosalas@brandeis.edu Scale What happens when systems have programs in multiple languages, hundreds of modules and classes, developed by teams of engineers? We need to approach programming in a whole new way, paying attention to good design, patterns, testing, source code management and other basics. In addition when software is developed in teams there are ways of approaching organization of the project, leadership, planning and scheduling. How do you design a system that is meant to support millions of users? How will it perform? You certainly can’t just get a bigger and bigger computer. This is most certainly an evolving space with new work happening both in academia and industry. Yet there are well established and tested fundamentals of architecture which we will look at to better understand this fascinating and important space. Programming There will be multiple programming assignments where students will work individually or in teams to modify and enhance parts of the NanoTwitter software. Students will have to build and test on their own computers and then deploy software to servers in the cloud. We will subject the software to artificial loads to see how they behave and then see how changes affect performance. Prerequisites and admission Prerequites for this course is that you have taken Cosi 12b and/or 21a. For more information contact Pito Salas, pitosalas@brandeis.edu ", "tags": "", "loc": "/" },

        {"title": "Welcome", "text": "Homework due for today Note for first day of class: Each day of class has a page on this web site. The first section of that page is always the homework due on that very day. So in other words, the homework listed here is actually  pre-work  for day one. We will go over this in a little more detail during class. Introductions Introduce Pito, where I came from, and why I am excitied about this course. Read: FAQ for Pito Salas Discussion: Opening Intentions and Effective Learning Environment (Opening Intentions) What is this course about: Software Engineering and Design Homeworks and Grading The prime source for this course is this web site. You are responsible for reading the lecture’s page before each class There you will find the list of homeworks due for the class Latte is used just as a way to submit homeworks ", "tags": "", "loc": "/content/lectures/part1/01_welcome/" },

        {"title": "Nano Twitter Functionality", "text": "NanoTwitter (nt) is a baby version of Twitter designed as a platform for experimentation with scaling issues. Functionality Users: can register for an account by supplying an email and a password are never deleted Logged in users Can follow and unfollow other registered users Can tweet Can see the flow of the last n tweets by the users that they have followed Non-logged in users See the flow of the last n tweets by any user Tweets Consist of a 140 characters of text a date-time of creation Belong to one user Can never be deleted REST Api is provided Retrieve the firehose of all tweets by all users Retrieve the firehose for one specific user User Interface Very basic bootstrappy html interface Non-logged-in root page (/) Login link (/login) Register for account link (/user/register) List of the most recent  n  tweets, with link to tweeter’s page Logged-in root page (/) Logout link (/logout) Box to submit a tweet (/tweet) List of most recent ‘n’ tweets, with link to the tweeter’s page Specific user’s page (/user/2345) List of users tweets Button to follow that user (available only if logged in) API REST-y API All paths start with /api/v1 /tweets/23 - return tweet with id /users/23 - return user information for user 23 /tweets/recent - return the recent n tweets /users/23/tweets - return the users recent tweets Values as JSON Tweet: {  id : 123,  text : foobar,  created : jan-11-2015 } User: { id : name : Pito Salas} List of tweets: [<tweet>, <tweet>,...] Follow list: [ user_id : 22,  user_id : 23, ...] ", "tags": "", "loc": "/content/nt/01_nt_functionality/" },

        {"title": "NT Design and Architecture", "text": "The objective of the NT project is to give students hands-on experience designing a simple system which will expose and exercise issues of scale. Architecture The  spec  for NanoTwitter doesn’t dictate anything about the architecture other than it be reached via a url. It has two kinds of access, through a web browser (for human access) and as a REST service (for access from other applications). Deployment NT will be deployed as a service in the cloud. Our base case is to use Heroku but again there are other variations that are possible which are equally valid. Language and framework The base case would be to implement NT using Ruby and Sinatra. We will cover those in the class. But there are other languages and platforms that could be used as easily, for example Node.js with Express. There are others. We will discuss this possibility in class. Testing The NT code will have automated unit test that can be run at will to check for new bugs. The base case will be to use ruby’s minitest package. Logging and performance The NT code will need to incporate instrumentation to be able to monitor its performance and detect bottlenecks and other problems. The base case will be to use newrelic. ", "tags": "", "loc": "/content/nt/02_nt_arch/" },

        {"title": "Capybara", "text": "Capybara and friends Allows expected behavior in browser also to be tested Take a look at this: formdemo/test/integration/home_page_test.erb ", "tags": "", "loc": "/content/topics/arch/capybara/" },

        {"title": "Data Modeling", "text": "Background What does the term ‘Data Modeling’ mean? How Relational Databases work Tables, Columns, Databases, Joins  3d Normal Form  Different approaches Key question is how you correlate the tables in a database with the attributes of a class Data Modeling Crucial step in design SQL vs. NOSQL databases SQL Databases Schema Tables Fields Joins Relationships One to One (Student <-> Transcript) One to Many (Student -> Car) Many to Many (Student <-> Courses) Careful analysis of the product requirements Exercise Team up with one other person Design the data model for a music library management application like iTunes 15 Minutes, ask questions Steps What are the entities? Is something contained in something else? How many X’s are there for each Y? What kinds of facts do we need to know about each entity? What are the datatypes of those facts? Are there any ‘arrays’? Possibly identify other entities Repeat until done ", "tags": "", "loc": "/content/topics/arch/data_modeling/" },

        {"title": "Database Migration", "text": "  If you don’t know the schema of your app, you don’t know your app  - Said one of our outside reviewers over lunch today ORM means we have to keep the database and the Objects  in sync  What happens if in release 2 I have to modify the database? Migration When you discover you need a new column or table, you can modify the database E.g.break the  name  field into a  first name  and  last name  Data Migration How do I move over all the user records that were already there? Logic Migration What has to change in the server code to accomodate this change? Does this mean that migration is bad? It’s not good nor bad: it’s unavoidable It’s much more painful when you are ‘in production’ ", "tags": "", "loc": "/content/topics/arch/database_migration/" },

        {"title": "HTTP for Rails", "text": "HTTP is a network protocol Mental model: calling a function across a network Client is the caller Server is where the function exists Client receives the result Let’s use telnet to make such a ‘call’ $ telnet example.com 80 $ GET / HTTP/1.1 $ Host: example.com Deconstructing the call  Call  includes: target host (example.com) target port on the host (80) HTTP verb:  GET  (a.k.a. method) (ref: HTTP Method Definitions) address: (the path or  / ) Version of HTTP protocol (1.1) There are lots of other  parameters  that are allowed in this call Deconstructing the returned data from that call (Reference: HTTP Response Fields)  Response  includes: Status code: 200 (see [HTTP Status Codes(http://httpstatus.es)]) Accept-Ranges: bytes (lets the server tell the caller that it has that capability) Cache-Control: max-age=604800, how long this response may be cached) Content-Type: text/html Tells recipient how to parse the result) Date: Thu, 27 Feb 2014 00:33:26 GMT The current date time on the server) Etag:  359670651  kind of a unique-id for caching purposes) Expires: Thu, 06 Mar 2014 00:33:26 GMT (says when the page is required to expire) Last-Modified: Fri, 09 Aug 2013 23:54:35 GMT (When this page was edited) Server: ECS (ewr/1584) (Software running the server) X-Cache: HIT (Page came out of a cache) x-ec-custom-error: 1 (There was no error in the cache) Content-Length: 1270 (Content following this is 1270 bytes) All this is followed by text that we know should be interpretted as text/html What are the HTTP Methods GET, PUT, POST, DELETE Think of them like a reguired first argument to the call The interpretation of the Simplified view of the world Think of the relationship between the client (the user in a browser) and the server (the rails server) as a program calling a function! Call: CallUsingHTTP( GET ,  www.brandeis.edu ,  /index.html ) Returns: Status code, Content type, Content, and potentially more ", "tags": "", "loc": "/content/topics/arch/http/" },

        {"title": "Internet Technology Basics", "text": "Clients and Servers Both are computers, depends on their purpose Networking’s purpose is to get ‘data’ from one to the other …. even when they are on the other side of the world Take a look at $ ping salas.com $ traceroute salas.com $ open http://map-on-net.com Basic Terms MAC address: Media Access Controll address IP Address: Internet Protocol Address Domain name: brandeis.edu DNS: DOmain Name System MAC addresses, IP addresses and DNS User types in a domain name Target computer is identified by a MAC address So: Need a phonebook of some kind DNS: distributed name service Also take a look at $ open http://map-o-net.com/ $ open http://icicle.dylex.net/~ipmap/ More about IP So the IP address is for 1 specific ‘host’ or server (as usual there are exceptions :) IP is the way servers talk ‘to each other’ to get a packet of bits between them Conceptually, ‘send these bits to this ip address’ What’s a port number TCP/IP: what it means ", "tags": "", "loc": "/content/topics/arch/internet_basics/" },

        {"title": "Mobile - architectural considerations", "text": "##### Mobile Architectures Most of the concerns we talked about for web and cloud apply almost equally for mobile, with the major addition of communications: * What kind of information needs to be sent between mobile app and server? * Characteristics: * How much of it is there? * How fast does it have to go? * What is acceptable latency? * Firewalls * Are there likely to be firewalls in the way? * Does the client have to reach the server, or vice versa or both? * Protocols * Commonplace today is  REST  over  HTTP . * But all is changing all the time! * Security * Authentication * Authorization ", "tags": "", "loc": "" },

        {"title": "Mobile Architectures", "text": "Taxonomy of mobile applications Depending on need, mobile apps can be structured quite differently Untethered App Example: Angry Birds game Server: never or rarely requires one UI paradigm: must be a Local App Difficulty: Can be the easiest, although there are super complex and rich games Mobile Only App Example: Instagram Server: requires your own server, with intermittent or constant connection UI paradigm: local App by definition. There is no user interface for the ‘server’ or ‘service’ Difficulty: Significant challenge to provide all the functionality over limited device. Pure web-ui Example: GMail application on iPhone Server: requires your own server, and connected all the time UI paradigm: web based UI, by definition Difficulty: You save a lot of trouble by not having to develop local app. Much less mobile platform dependence Mobile front end to rich web app Example: Facebook app on iPhone and Android Server: your own server, providing it’s own user experience, plus a connection to the mobile app UI paradigm: Looks like a native app, often is a hybrid Difficulty: One of the most difficult. You need to design two separate and complete user experiences n.b. there other permutations but this scheme catches most of the major cases. n.b 2. the acceptable and popular approaches are constantly evolving based on user expectation and available tools and platforms ", "tags": "", "loc": "/content/topics/arch/mobile_architectures/" },

        {"title": "Mocking", "text": "Mocking Overview SUT ( System under test ) Collaborators (other objects needed to test SUT) Decoupling is a major goal What is a Mock? An object that stands in for another object during testing Make sure that only the right methods are called Other terms: doubles, stubs, and others. Don’t get confused. Advantages Decoupling is always a good thing. Performance Maintainability Testability If you introduce a bug in a class Only the tests that are testing that class will fail So, fewer false positives Disadvantages Need to maintain to consistency between the mock and the class-being-mocked Otherwise you may be testing somethingn that doesn’t even exist Coding example: Doubles Demo Refs: Minimalicious Testing in Ruby Great conceptual overview: Mocks aren’t Stubs ", "tags": "", "loc": "/content/topics/arch/mocking/" },

        {"title": "Models", "text": " Term comes from  MVC  - model, view, controller Model is a concept describing a subsystem or part of your overall application Often it is a collection of Classes (ruby or otherwise) What does the Model do? It encapsulates the application state It responds to queries about the state and requests to update the state It validates those requests to keep the state consistent It contains (almost) no  business logic  It doesn’t interact directly with the user or the outside world Where does the model keep the state Most often in a database but not always ", "tags": "", "loc": "/content/topics/arch/models/" },

        {"title": "Model View Controller - review", "text": "MVC Review http://www.brandeis.edu/index.html Review of MVC Reminder: Basic Client <-> Server structure MVC is a general pattern Here we are applying it to a web (http) server The Models: contains the application ‘state’ Think of it as what you want preserved if your app (i.e. the server in our case) has to be restarted Think of your user’s reasonable expectations Discussion The Controllers: master control switch Sees requests from the outside world Asks the models for data, sometimes updates the data Asks the views for new pages or results Responds to the request (Note: this parallels the HTTP protocol exactly!) The Views Use data (given by the controller) To create and assemble responses to be sent Responses are html, but may be other formats too ", "tags": "", "loc": "/content/topics/arch/mvc_review/" },

        {"title": "NoSql and MongoDB", "text": "Definitions NoSQL databases: Don’t have tables, columns, or SQL Don’t have records and views! NoSQL databases Have documents Notes: SQL database world is far more mature: reliable, scalable, deployable NoSQL database is still quite young Terminology is still in flux Traditional databases, e.g. Postgress, are starting to build in nosql-like features Future is not totally clear When to consider NoSQL databases When the rigid schema becomes a problem Classic example: When a user profile has a multitude of optional collection of properties. Terminology (MongdoDB) Collection: A collection in mongodb is same as a table in mysql or oracle. Document: A document in mongodb is same as a row or record in any rdbms. JSON: Javascript Object Notation is a data-interchange format. It is easy for humans to read/write and also for machines to parse/generate. Key/value pair: ex:  name  :  nosql  :Here  name  is the key and  nosql  is the value. References Linkedin Data Infrastructure The State of NoSQL in 2012 Ruby Mongodb Tutorial Mongo GUI Tool Mongo Demo Ruby Code ", "tags": "", "loc": "/content/topics/arch/nosql_mongodb/" },

        {"title": "Object Oriented Design", "text": " classes: How do you decide what a class is and what it is not? classes and objects instance variables constructor (no destructor methods: private/public inheritence: rarely is this the best solution composition and delegation: a better solution Polymorphism  Duck  typing. Do you see how duck typing is an alternative/complement to inheritence? Consider a method like #can_speak? in a gaming application Reference Great book on OO Design: Practical OO Design in Ruby ", "tags": "", "loc": "/content/topics/arch/oo_design/" },

        {"title": "Refactoring", "text": "Refactoring Techiniques ", "tags": "", "loc": "/content/topics/arch/refactoring/" },

        {"title": "Regular Expressions", "text": " Text pattern matching Used many places Ruby: (1.methods.map(&:to_s).grep(/.*sp.*/)) Shell: (find . -regex .*st[^/]*) … all over the place Rubular. See: Puzzle – Write a regex that will match: pit, spot, spate, slap two, respite but reject: pt, Pot, peat, part Puzzle – Write a single regex that matches all of these <xml> <opentag> <closetag> </closetag> <with attribute= 77 > Regexp for a valid email address is: \b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b Let’s try and test it and find flaws in it And interpret it Ref: All about email regex ", "tags": "", "loc": "/content/topics/arch/regexp/" },

        {"title": "Designing REST API", "text": "Foursquare App What happens when new user runs the app existing user launches it new user visits the web page when a merchant logs into the web site #### NEST Thermostat What happens when A new thermostat is installed for the first time? A thermostat runs day to day A user changes the temperature on the thermostat A user runs the NEST app ", "tags": "", "loc": "/content/topics/arch/rest_protocol_design/" },

        {"title": "REST and Web Services", "text": "What is a web service? Up to now we’ve said that a web server delivers html to clients Consider this web page: Olin College Engineering Courses What would  TeachBack  do if it wanted to have a list of courses pre-populated with a college’s courses? Grab all the text curl http://wikis.olin.edu/coursecatalog/doku.php?id=course_listings:engr > olincourses.txt Write a program to parse that page and then load the results into a database. This is called  scraping  and usually that would violate a copyright Server can also deliver information in  machine readable  formats (such as JSON or XML) The term  API  is used to describe the permissable ways that one program can call another, such as a library Web Service API is when this is between servers on the internet Protocols This can be done with many different standards and formats and protocols SOAP: Simple Object Access Protocol XMLRPC: XML-RPC REST: Representational State Transfer – our focus Discussion: What are some of the big differences between calling a gem’s API and calling a web service API?. Performance? Error handling and recovery? Security? Cost sharing? Pause to look at the big picture Servers on the internet, anywhere, can be called as objects and methods Resources of all kinds can be offered to clients with no coordination The internet becomes a huge, amazing Operating SystemsRetrieving information One level deeper RPC - Remote Procedure Calls Imagine a procedure (method) : return_fortune_cookie. What would it mean to call it between two computers? What would it mean to call it between two computers over the internet? How would you approach it? REST - A different way to think about RPC REST based on HTTP: Mini review HTTP Verbs: GET (HEAD), PUT, POST, DELETE. Think of everything in terms of a ‘resource’ that is being manipulated For example, GET means get a representation of the resource marked, e.g. GET http://www.facebook.com/user/pitosalas GET http://www.facebok.com/users GET 0.0.0.0:3000/cards/1.xml Some things are harder to fit with the model What might a fortune cookie service look like as REST? The ‘resource’ here is a single fortune http://cookieserver.org/fortunes/1 http://cookieserver.org/fortunes http://cookieserver.org/fortunes/random Note fortunes/random, random is not exactly identifying a resource; but close enough. What if caching was done strictly by url? Two advantages: some rhyme or reason on how to build urls and make logical use of url space Different ‘representations’ possible: html and xml, but others too, say csv or video Big one: Standards allow caching in the cloud Leveraging Web Services There are many many different kinds of services that deliver their info over a web service. Use google and Programmable Web has thousands of APIs you can use You might have to call a service directly (using HTTP) You might find a gem to provide a nicer, limited, ruby apii to the service You might elect to build your own gem Good design practice to isolate details of the web service from the rest of the code Security, Authentication, Money Several reasons why a service might need authentication They want to charge for it They want to force you to register with them so they know who you are They simply want to put in a speedbump Most typicall technique You register on their site (manually) and they give you api token of some kind (a random string) Every call to the service includes a mandatory paramter Case study (Borrowed from Trade Assistant) Problem: Need to get an assortment of information about stocks: price quotes, historical info, and so on. Steps to solve the problem Locate an appropriate web service, with google and progammable web site Investigate whether there is an API, is it REST, is it free or does it cost, do they have the data I want A bunch of googling led me to two candidates: Yahoo Stocks Api and Markit On Demand Experiment to see if they do what I need. See Github Webservicedemo Build a class or set of classes to encapsulate the API calls. Consider isolation from web service , error handling, caching of common results. Key Gems to make your life good: typhoeusXmlSimple Delivering Web Services Providing a Web API from your server Often nice to provide sample code and a ‘binding’ to a language Need to decide on the url (REST!) Latest thinking is that you should not base it on your underlying relational database structure. In other words, to get title of course 3’s lecture 4 Don’t specify: http://teachback/api/course/3/lecture/4/title Do specify: http://teachback/api/course_info?code=COSI-234 -> xml structure with info about that course. Case Study Goal: Your server needs to respond to HTTP GET for this url: http://teachback/api/course_info?code=COSI-234 Controller: api Action: course_info Parameter: code=COSI-234 Let’s take a look at the code in Webservice Demo Try this url: http://0.0.0.0:3000/api/course_info.xml?course=aaa ", "tags": "", "loc": "/content/topics/arch/rest_web_services/" },

        {"title": "Sesions", "text": " Web Server is stateless Discussion: What does that mean exactly? Sessions: a general concept tying ‘state’ from one request to the next Examples: who is logged in, what is in their cart, what product they want, etc. A set of name-value pairs, whatever you need them to be Where is session stored? Cookies Fast and simple Limit on size On server Still requires a ‘session_id’ of some kind Indexed into a database of session state What should be stored in a session? Anything. But remember it’s just a bit of text! Don’t store objects. Store ids. Security Session hijack attack Decrypting cookies Rails options session_store = :cookie_store session_store = :active_record_store session_store = :mem_cache_store Formdemo, again! add gem 'activerecord-session_store' to gemfile $ rails generate active_record:session_migration $ rake db:migrate In initializers/session_store.rb: Rails.application.config.session_store :active_record_store ", "tags": "", "loc": "/content/topics/arch/sessions/" },

        {"title": "TDD demo", "text": "How you might unit test  by hand  NB: This example is using minitest/spec 1def fact(n) 2 if n == 1 3 1 4 else 5 fact(n-1) * n 6 end 7end 8 9if (fact(1) != 1) 10 puts  Error when calling Factorial with 1  11elsif fact(2) != 2 12 puts  Error when calling Factorial with 2  13else 14 puts  Factorial function works.  15end 16 17 18 19 How can you automate this with tools There are a huge variety of tools and techniques to avoid repetitious coding We will be using the built-in unit testing framework called  minitest  For this course focus ONLY on unit testing A Cosi101 Factorial Function using minitest 1require 'minitest/autorun' 2 3def fact(n) 4 if n == 1 5 1 6 else 7 fact(n-1) * n 8 end 9end 10 11describe  factorials  do 12 it  works for 1  do 13 fact(1).must_equal 1 14 end 15 16 it  works for 2  do 17 fact(2).must_equal 2 18 end 19 20 it  works for 20  do 21 fact(20).must_equal 2432902008176640000 22 end 23 24 it  works for zero  do 25 fact(0).must_equal 0 26 end 27end 28 Notes What other tests can we do to test this Factorial class? Testing a full ruby class 1require 'minitest/autorun' 2 3class PlayingCard 4 attr_reader :rank, :suit 5 def initialize suit:nil, rank:nil 6 @suit = suit 7 @rank = rank 8 end 9 10 def random 11 @suit = [ hearts ,  spades ,  diamonds ,  clubs ].sample 12 @rank = rand(13) 13 self 14 end 15 16 def to_s 17 card_to_english 18 end 19 20 def card_to_engish 21 rank_to_english +   of   + @suit 22 end 23 24 def valid? 25 @rank >= 1 && @rank <= 13 && !@suit.nil? 26 end 27 28 private 29 30 def rank_to_english 31 if @rank ==  1  32  Ace  33 elsif @rank > 1 && @rank < 11 34 number_to_english(@rank) 35 elsif @rank == 11 36  Jack  37 elsif @rank == 12 38  Queen  39 elsif @rank == 13 40  King  41 end 42 end 43 44 def number_to_english val 45 %w(fail0 fail1 two three four five six seven eight nine ten)[val] 46 end 47end 48 49describe PlayingCard do 50 before do 51 @a_card = PlayingCard.new.random 52 end 53 54 it  creates a valid card  do 55 @a_card.valid?.must_equal true 56 end 57 58end Notes What other tests can we do to test this PlayingCard class? ", "tags": "", "loc": "/content/topics/arch/tdd_demo/" },

        {"title": "Intro to Test Driven Development", "text": "There are different kinds of testing and why they are important Unit testing: test a small unit of code that has few side effects Integration testing: test a subsystem that has many components End-to-end testing: test the complete system from top to bottom Code Coverage: Seeing how much of your actual code is run during a test or production Performance testing: Checking the speed of your code and there are some other categories NB: Ruby community is especially focused on quality and testing ", "tags": "", "loc": "/content/topics/arch/tdd_intro/" },

        {"title": "World Wide Web", "text": "The World Wide Web Formats and protocols What do those words mean? A convention Gives meaning to  bits on the wire  Example: 3 critical protocols or formats HTTP - Hyptertext Transfer ProtocolP URI - Universal Resource Identifier HTML - Hypertext Markup Language Actually there are a bunch more that are almost as important CSS - Cascading Style Sheets JS (or ECMA) - Javascript More? All this is based on foundational Internet protocols TCP/IP DNS Dissecting the URL Protocol Host Name (see also: domain name, subdomain name) Port (default for http is 80 and for telnet is 23, etc.) Path Parameters HTTP Protocol Client makes a request (a packet is sent) Server Responds to the request (a packet is sent back) URL is on the  envelope  of the request Stateless HTTP Requests contain: Request  method  URL Host name Path Parameters Request Headers Methods: GET, HEAD, POST, PUT, DELETE, a few others HTTP Responses contain Status code Response headers: Content-type Content-length Lots of other stuff Understanding this is critical! Use Telnet to experiment with TCP/IP TCP/IP sends and receives ‘text’ protocols Telnet utility command line indicates the target host and port Then you can type in the messages What happens if I don’t specify port 80? telnet example.com 80 GET /index.html HTTP/1.1 Host: www.example.com Use an app to visualize HTTP Mac only: Rested Other platforms: rest-client Mac version of rest-client Review: What does TCP/IP do? Sends a ‘message’ from one computer to another (often message is text) Destination computer is designated by a host or domain name Destination within the computer is designated by a port number The format or Interpretation of the ‘message’ is determined by the port Usually port 80 messages are interpreted as HTTP Review: What does HTTP do? Expects a  request  message which is answered by a  response  Request message Defines a  method  Defines the  path  Supplies information about the format and lots of other stuff Response message Defines a status code Defines format of the response Defines the response body Review: How is the URL processed? URL: http://www.salas.com:80/toplevel?catalog=cosi goes: http -> use http protocol :80 -> over port 80 -> method is implictly GET www.salas.com -> host www.salas.com /toplevel -> the path Params -> catalog =  cosi  ", "tags": "", "loc": "/content/topics/arch/www/" },

        {"title": "Rails Activerecord Queries", "text": " 1# Simple queries return collections of instances 2 Article.find(3) # id=3 3 Article.w­her­e(a­uthor: 'admin') 4 Article.where( likes_count = ? , value_for_count) 5 Article.f­ind­_by­(title: 'Rails 4', author: 'admin') 6 Article.find_or_create_by(title: 'Beatles') 7 8# Working with collections 9 Article.where(author: 'pito').last # choosing 10 Article.where(author: 'pito').order(created_at: :desc) # sorting 11 12# Working with associated Models 13article = Article.comments.where(author: 'georg') 14 ", "tags": "", "loc": "/content/topics/cribsheets/activerecord_queries/" },

        {"title": "Codeclimate", "text": "Something ", "tags": "", "loc": "/content/topics/cribsheets/code_climate/" },

        {"title": "DB datatypes for Rails 4", "text": " binary boolean date datetime decimal float integer primary_key references string text time timestamp ", "tags": "", "loc": "/content/topics/cribsheets/db_types/" },

        {"title": "Git and Github", "text": "What is git? Git is a version control system that keeps track of changes to files, so that you can have a history of all the changes made to a file and you can revert to a specific version later on. Here are some features of Git: Keep separate branches of development Rollback to a previous version if a bug was found Different versions for development and deployment; the deployment version should be a stable one Merging branches into one branch … There are tons of online resources available for learning git. Below is a list of some that you may find useful: try.github.com (beginner) Git Tutorial (beginner) Git Ready (from beginner to advanced) Learn Git Branching (beginner/intermediate) Understanding Git Conceptually (intermediate) Pro Git (advanced) Git Magic (advanced) What is Github? Github is a web application that provides hosted version control services using Git. You can sign up and create public repositories for free, but you should pay to create private repositories. There are other similiar services among which are BitBucket and Gitent. Discussion points What are the main benefits of using GIT when developing a project by yourself? What are the main benefits of using GIT when developing a project with a team of coders? What are the reasons to create a branch? When several team members commit different changes on their local repositories, how do the reconcile their different changes in the main github repository? What are the advantages to having a staging area? After discussing these  big picture  ideas, we’ll look at the internals to see what Git is actually doing when you branch, commit, etc. Some of the basic skills you’ll need are create a local repository (git init) create a github repository and push your local repo to github clone a github repository create a temporary branch, make some edits, do some tests, merge it into your main branch, merge it into the team main branch interrupt the work flow above to fix a critical bug by stashing your current work, checking out the main branch, creating a temp branch with the fix, merging it into main, switching back to your branch and applying your stashed work to get you back to where you were pulling down someone else’s committed changes and resolving the inevitable conflicts that have arisen (by deleting theirs and using yours!) then pushing making a temporary extension, and rebasing several times as other people are committing their changes to the main branch on the shared server viewing your current status checking out another branch tagging the current version (e.g. v1.0 or v1.3 or v1.3.7) cloning a tagged version ", "tags": "", "loc": "/content/topics/cribsheets/git/" },

        {"title": "Heroku", "text": "Heroku is a cloud platform as a service which offers a solution based on Amazon AWS to deploy your applications. It supports many programming languages and frameworks and you can easily deploy your application using Git. It helps you focus more on the functionality of the application rather than infrastructure. Heroku also offers a command line tool that makes it easier for you to manage your applications. ", "tags": "", "loc": "/content/topics/cribsheets/heroku/" },

        {"title": "Minitest and Minitest/Spec", "text": "Content Credit: Minitest Cheatsheet test capture_io flunk msg = nil pass msg = nil skip msg = nil, bt = caller assert test, msg = nil assert_block msg = nil assert_empty obj, msg = nil assert_equal exp, act, msg = nil assert_in_delta exp, act, delta = 0.001, msg = nil assert_in_epsilon a, b, epsilon = 0.001, msg = nil assert_includes collection, obj, msg = nil assert_instance_of cls, obj, msg = nil assert_kind_of cls, obj, msg = nil assert_match exp, act, msg = nil assert_nil obj, msg = nil assert_operator o1, op, o2, msg = nil assert_output stdout = nil, stderr = nil assert_raises *exp assert_respond_to obj, meth, msg = nil assert_same exp, act, msg = nil assert_send send_ary, m = nil assert_silent assert_throws sym, msg = nil refute test, msg = nil refute_empty obj, msg = nil refute_equal exp, act, msg = nil refute_in_delta exp, act, delta = 0.001, msg = nil refute_in_epsilon a, b, epsilon = 0.001, msg = nil refute_includes collection, obj, msg = nil refute_instance_of cls, obj, msg = nil refute_kind_of cls, obj, msg = nil refute_match exp, act, msg = nil refute_nil obj, msg = nil refute_operator o1, op, o2, msg = nil refute_respond_to obj, meth, msg = nil refute_same exp, act, msg = nil spec must_be -> assert_operator must_be_close_to -> assert_in_delta must_be_empty -> assert_empty must_be_instance_of -> assert_instance_of must_be_kind_of -> assert_kind_of must_be_nil -> assert_nil must_be_same_as -> assert_same must_be_silent -> assert_silent must_be_within_delta -> assert_in_delta must_be_within_epsilon -> assert_in_epsilon must_equal -> assert_equal must_include -> assert_includes must_match -> assert_match must_output -> assert_output must_raise -> assert_raises must_respond_to -> assert_respond_to must_send -> assert_send must_throw -> assert_throws wont_be -> refute_operator wont_be_close_to -> refute_in_delta wont_be_empty -> refute_empty wont_be_instance_of -> refute_instance_of wont_be_kind_of -> refute_kind_of wont_be_nil -> refute_nil wont_be_same_as -> refute_same wont_be_within_delta -> refute_in_delta wont_be_within_epsilon -> refute_in_epsilon wont_equal -> refute_equal wont_include -> refute_includes wont_match -> refute_match wont_respond_to -> refute_respond_to mock expect(name, retval, args=[]) verify ", "tags": "", "loc": "/content/topics/cribsheets/minitest/" },

        {"title": "Best Rails and Ruby Resources", "text": "Getting answers Stack Overflow: You may or may not have heard of Stack Overflow, but have you really used it? Have you looked for answers - probably yes, but have you posted questions? You will be doing both extensively during the course, so you might as well get used to it! Google Google is your friend. You know this of course. Almost any technical problem you encounter has been solved and written up by someone. Google it. Ask Mother Google. Ask The Google! Best of Rails Help Rails Guides Highly readable and concise (yet comprehensive :) guides to the most important parts of Rails. Often better than any book or manual. Rails Casts This web site contains hundreds of free screen casts that give step by step explanations on all sorts of use cases of rails. As the series has been going on for years, and has been in suspended animation since this June, you will see videos that talk about old versions of Rails and obsolete techniques. So, your mileage may vary but it’s still a great resource. Rails for Zombies The RailsApp project has a great book introducing Ruby and Rails: Learn Ruby on Rails (Ask me for the code) Best of Ruby Help Ruby the hard way is great if you are stuck getting going with Ruby Ruby on Rails Tutorial - Another excellent Rails tutorial ", "tags": "", "loc": "/content/topics/cribsheets/rails_links/" },

        {"title": "Rails Validations", "text": "Details can be found here: Rails Guides on Validations 1validates :content, :length => { 2 :minimum => 300, 3 :maximum => 400, 4 :tokenizer => lambda { |str| str.scan(/\w+/) }, 5 :too_short =>  must have at least %{count} words , 6 :too_long =>  must have at most %{count} words  7} 8 9validates :name, 10 :presence => true, 11 :length => { :within => 1..255, :allow_blank => true } 12 13# format 14validates :legacy_code, :format => 15 { :with => /\A[a-zA-Z]+\z/, 16 :message =>  Only letters allowed  } 17 18# in 19validates :size, 20 :inclusion => { :in => %w(small medium large), 21 :message =>  %{value} is not a valid size  } 22 23# numericality 24validates :points, :numericality => true 25validates :games_played, :numericality => 26 { :only_integer => true } # Uses regex /\A[+-]?\d+\Z/ 27 28# presence 29validates :order_id, :presence => true 30 31# uniqueness 32validates :email, :uniqueness => true 33validates :name, :uniqueness => 34 { :scope => :year, :message =>  should happen once per year  } 35validates :name, :uniqueness => { :case_sensitive => false } 36 37# allow_blank 38validates :title, :length => { :is => 5 }, :allow_blank => true 39 40# allow_nil 41validates :size, :inclusion => 42 { :in => %w(small medium large), 43 :message =>  %{value} is not a valid size  }, 44 :allow_nil => true 45 46# on 47validates :email, :uniqueness => true, :on => :create 48 49# conditionals 50validates :card_number, :presence => true, :if => :paid_with_card? ", "tags": "", "loc": "/content/topics/cribsheets/rails_validations/" },

        {"title": "Rake  tasks  (commands)", "text": "Getting a list of Rake  tasks  rake -T # to get a list of all the more typical rake tasks rake -T -A # show every single task Primary db related tasks db:migrate runs migrations for the current env that have not run yet db:create creates the database for the current env db:seed (only) runs the db/seed.rb file db:setup runs db:schema:load, db:seed db:reset runs db:drop db:setup db:migrate:reset runs db:drop db:create db:migrate Secondary db related tasks db:create:all creates the databases for all envs db:drop drops the database for the current env db:drop:all drops the databases for all envs db:migrate:up runs one specific migration db:migrate:down rolls back one specific migration db:migrate:status shows current migration status db:migrate:rollback rolls back the last migration db:forward advances the current schema version to the next one db:schema:load loads the schema into the current env’s database db:schema:dump dumps the current env’s schema (and seems to create the db as well) ", "tags": "", "loc": "/content/topics/cribsheets/rake_commands/" },

        {"title": "Regexp Cheatsheat", "text": "Online experimenting Here is an amazingly useful online tool to experiment with Regexps: Rubular Top Regexp expressions [abc] A single character of: a, b, or c [^abc] Any single character except: a, b, or c [a-z] Any single character in the range a-z [a-zA-Z] Any single character in the range a-z or A-Z ^ Start of line $ End of line \A Start of string \z End of string . Any single character \s Any whitespace character \S Any non-whitespace character \d Any digit \D Any non-digit \w Any word character (letter, number, underscore) \W Any non-word character \b Any word boundary (...) Capture everything enclosed (a|b) a or b a? Zero or one of a a* Zero or more of a a+ One or more of a a{3} Exactly 3 of a a{3,} 3 or more of a a{3,6} Between 3 and 6 of a ", "tags": "", "loc": "/content/topics/cribsheets/regexp/" },

        {"title": "Ruby Gems", "text": "RubyGems is a package manager framework for Ruby that you may use to install different Ruby libraries and programs. For example, we can install rails by running gem install rails and we can uninstall it by running gem uninstall rails. To learn more about RubyGems check out RubyGems guide. Cool Ruby Gems Jazz Hands: enable pry and some other gems for great rails debugging ", "tags": "", "loc": "/content/topics/cribsheets/ruby_gems/" },

        {"title": "Twitter Bootstrap", "text": "Twitter Bootstrap is an open source front-end framework developed by Twitter developers that contains free tools and elements for developing websites and web applications. It includes HTML and CSS templates, buttons, form elements and other UI components, and also JavaScript plugins. You can desing a beautiful user interface with minimum effort by using Twitter Bootstrap. ", "tags": "", "loc": "/content/topics/cribsheets/twitter_bootstrap/" },

        {"title": "Unix Shell", "text": "What is Unix Shell? Unix shell is a command-line interface (shell) for Unix-like operating systems through which user enters commands as text. The command-line interpreter then executes the command and returns the results. The most common shells in Unix were Bourne shell and C shell, and then Bash (Bourne-Again Shell) was developed as the original Unix shell. We will talk about most useful Bash commands but here are some very good free resources for you to learn more about shell and command line: Learning the Shell: an introduction to shell and basic commands The Command Line Crash Course: a super fast course in using command line for FREE BashGuide: a Bash guide for learning more about commands and writing shell scripts Bash Reference Manual: Bash reference manual And here are some great books: A Practical Guide to Linux Commands, Editors, and Shell Programming UNIX and Linux System Administration Handbook: a comprehensive book for anyone who wants to know about Linux system administration Unix File System File system is an essential part of every operating system, and Unix is no exception. Unix file system is a tree like structure that supports three kinds of files: regular files, directories and special files that are files like Unix sockets and symbolic links. Everything in Unix is considered a file if is not a process. Even physical drives are considered as files, which should be mounted by the operating system for read/write access. The root of this structure is ‘/’, and each file under the root is identified by its path, name and a unique identifier (inode). Unix support file extensions (e.g. .txt or .png) and also hidden files as other operating systems. The difference is that names of the hidden files start with ‘.’ and most of the times is used for configurations. For example, if you use git and you add global configurations, it will create a file named ‘.gitconfig’ in your home directory, which is hidden and is used by git to store the user’s configurations. Shell Commands and Streams Shell commands in Unix-like operating systems are executable through a command-line interface. They accept arguments and options, and the most obvious difference between them is that options start with ‘-‘. For example, many commands has a help option which gives information about the command and its arguments and options, and is specified by ‘-h’ or ‘–help’. There are three kinds of streams that Bash commands work with: STDIN, STDOUT and STDERR. STDIN stands for ‘standard input’ and is the stream that a command accept to get input. It can be binary, text or even keyboard input. A command can write its outputs to STDOUT (standard output) which is the default stream that is printed out to the screen or STDERR (standard error), the error stream which is also printed to the screen by default. Most Useful Commands List files: ls ls #lists files in the current directory (same as 'ls .') ls -l #lists files in the current directory with details ls -la #lists all the files (even hidden files) in the current directory ls --help #prints help information about ls command Change directory: cd cd ~ #go to home directory (same as 'cd' without arguments) cd ../ #go to the parent directory Copy files: cp cp source.txt dest.txt cp -r mydir ~/ #copy the directory 'mydir' recursively to my home directory cd -i source.txt dest.txt #prompt before overwritting Move files: mv mv source.txt dest.txt mv mydir ~/ #move the directory 'mydir' recursively to my home directory mv -i source.txt dest.txt #prompt before overwritting Remove files: rm rm source.txt rm -r mydir #remove directory 'mydir' recursively rm -i *.txt #remove all files with .txt extension but ask before removing Symbolic link: ln ln -s /directory/foo.txt #make a symbolic link with the same name in the current directory ln -s /directory/foo.txt myfile.txt #make a symbolic link with another name (myfile.txt) Current directory: pwd pwd #prints the current working directory Create a directory: mkdir mkdir mydir #create a directory named  mydir  in the current working directory Manual: man man ls #show manual page for ls command Run a command as the root: sudo sudo rm -rf /tmp/foo.txt #execute the rm command as the root user ", "tags": "", "loc": "/content/topics/cribsheets/unix_shell/" },

        {"title": "Vagrant Setup", "text": "Vagrant is a software that acts as a wrapper around virtualization software like VirtualBox and VMWare, and provides a more convenient approach to setup reproducible and portable work environments and an efficient and flexible workflow. It can easily be integrated with provisioning tools like Chef and Puppet, and there are many useful plugins that can be installed to add optional features. How to setup Vagrant Before installing Vagrant you should have one provider installed. For this course we recommend you to use VirtualBox. After VirtualBox is installed (if you are using Windows make sure that you restart after installation completes), download the provided Vagrant box Download Vagrant from here Install it and make sure that you can run vagrant from your terminal (on windows run it in command prompt, and on OS X run it in Terminal app) If you are using Windows, restart your computer after Vagrant installation completes. Create a new directory anywhere you prefer. (This directory will contain Vagrant config file and all your projects’ files) Open your terminal Go to the directory you created in step 3 by running cd <path to your directory> Run vagrant box add <box name> <path to the .box file> (e.g. vagrant box add ubuntu13.10 ubuntu-13.10-i386.box) Run vagrant init <box name>. Note: <box name> should be the same as the one you entered in step 6. (e.g. vagrant init ubuntu13.10) Run vagrant up If the last command works fine, you can connect to your box by running vagrant ssh. Development Environment You may put your projects’ files in the directory that you created during Vagrant setup so you would have access to it from your virual machine instance in /vagrant directory. You have two options to edit and run your codes: You can install Sublime Text on your host machine and write your codes there and then run them on your virtual machine instance. This way you can interact with your vm instance via ssh. You can interact with your vm instance via GUI, and write your codes and run them on your vm instance. If you choose this option you have to enable vm GUI in your Vagrant config file by editing Vagrantfile that has been generated in the directory you created while setting up Vagrant and writing/uncommenting the following lines: config.vm.provider :virtualbox do |vb| vb.gui = true end Note: make sure you relaunch your vm instance after the changes by running vagrant halt and then vagrant up. ", "tags": "", "loc": "/content/topics/cribsheets/vagrant_setup/" },

        {"title": "Agile Software Development", "text": "Agile Software Development How software engineering works (in my experience) How a software company is organized What is a software company nowadays anyway? Classic roles and how they apply in a software company Marketing Sales Engineering+Quality Assurance Finance Business Development The role of a ‘schedule’ Why is it important? How is it used? Discussion: When things change…. How are some of the ways that things can change? What can cause those changes Agile Project management/Software engineering Methodology? Many variants. Not a survey; just learning how to use a particular tool Agile => Extreme Programming, Scrum, and many other variants. Other methodologies: waterfall.  BDUF . Scrum Our preferred variant of agile Scrum Principles: Change is expected and embraced Time-boxing: work in fixed units of time (sprints) Describe what is to be built in small bite-size pieces (stories) Small, empowered, cross functional teams (scrum teams) Rapid Iteration with continues customer input (product owner) Don’t estimate – measure Concepts from Scrum: Stories Standup meetings Backlog Product Owner Scrum Master Sprints (for us, 1 week sprints) Velocity Pair Programming Continual Integration Test Driven Development ", "tags": "", "loc": "/content/topics/engineering/agile_development/" },

        {"title": "Intro to project tracking", "text": "Trello Tools for tracking projects Free for small, public projects Good for Agile and Scrum and even Kanban, specifically There are lots of other free and not-free tools which could be used as an alternative. Ask me if you want. Stories bite sized ‘tasks’ which are kept in priority order called stories because they typically describe a story about a user Work proceeds in cycles or iterations or sprints Can be between 1 and 4 weeks each Between sprints, story ordering can change to reflect latest view of priority Most important story to do NOW is on top ", "tags": "", "loc": "/content/topics/engineering/agile_projects_intro/" },

        {"title": "Programming made easy", "text": "http://blog.codinghorror.com/why-cant-programmers-program/ Also: Ruby the hard way ", "tags": "", "loc": "/content/topics/engineering/easy_programming/" },

        {"title": "Pivotal Tracker", "text": "Pivotal Tracker Very superficial description Tool for tracking projects Free Good for Agile and Scrum, specifically Stories bite sized ‘tasks’ which are kept in priority order called stories because they typically describe a story about a user Developers work in cycles or iterations or sprints Can be between 1 and 4 weeks each Between sprints, story ordering can change to reflect latest view of priority Most important story to do NOW is on top ", "tags": "", "loc": "/content/topics/engineering/pivotal_tracker/" },

        {"title": "Sofware Engienering Rules of Thumb", "text": "Personal Effectiveness Rules of Thumb When you have your best idea ever, always remember that the idea is just 1% of the journey Yes, ideas are cheap. At least in the world of software engineering and product development, everyone and their grandfather have ideas that may be great. The distance between the idea and the reality is great. Here’s Steve Jobs about ideas When your project is late, never ADD people Most of the time this will slow you down. The reason is that with each additional person you add to a project you’ve created that many more paths of communication. If a project is late, adding people to it will make it later. See * The Mythical Man Month by Fred Brooks. When planning your time, always allocate at least 20% to learning more Software engineering, programming languages, libraries, platforms, hardware and software are constantly changing. It take a real sustained effort to keep yourself up to date. What was a good or best practice a year ago may no longer be right. When arguing about a design or a feature, always stop and go ask a user. Good products don’t come from debate around a table, they come from discussion with the actual users. Don’t guess, don’t argue, go ask! This is known as  getting out of the building . When planning a project, always work in short increments. Follow Agile practices, whatever your favorite flavor is, scrum, XP, Kanban, it doesn’t matter. Different teams and people like different approaches. And they change and evolve all the time. But there are eternal truths there. Work in small chunks. Even smaller. Even smaller. Don’t change many things at once because when your code invariably breaks, you won’t be able to tell why. When you are spinning your wheels, always stop, think, and only then act. Google It! The amount of knowledge and down and dirty solutions that you can find on google is infinite. See a strange error message? Google it! And learn how to edit the error message, removing the parts that are specific to you so that you get matches. Or ask on the right forum or mailing list. You need to learn how to ask a question in a way that it will be answered. Make it as easy as possible on the answerer. When you are posting on a technical forum, always formulate the question carefully. Here are the best practices: Explain precisely what you are trying to accomplish Give a step by step explanation of what you’ve tried and the result. Give code samples, links to github accounts, and so on. If the code samples are not brief, create a gist and put the link in the post. Include listings of the relevant data, file names, console logs, and versions of various software you use. When you are writing a ‘business’ email, always follow best-practices If you expect action, have a single person in the to: Know the difference between reply and reply all. Usually don’t reply all The first sentence should state what action you are looking for Keep it short and sweet. Make it  skimmable . Know your audience and write appropriately. Get to the point. Be polite. When you have to write up a design or a spec, always keep it to a few pages. Prefer writing short ‘stories’ over writing long ‘specifications. There is no requirements ‘phase’ to a project any more. Write many short stories and prioritize them relentlessly. If the story is more effort to write than the code, you should be writing the code!. Programming Rules of Thumb When coding, never go beyond the immediate requirement. Write only the code you need to solve the problem RIGHT now. You might think that this class clearly will need all this methods even though no one is calling them yet. This almost never works out. Don’t spend time to set things up for what you’ll need in a month. You’re usually wrong. When coding, always wait to optimize until later. Optimizing too early is one of the cardinal sins of programming. You never know where the bottleneck will be, The thing you think will be slow, will be fast, and vice-versa. Actually you might end up ripping it out anyway! Conversely, when coding always keep a list of ‘technical debt’ items These are coding chores, cleanups, fill ins, removal of dead wood, that you purposely put off, even though you know you will have to come back to them. Later, when you want a change of pace in your coding, you can look at that list for some easy pickings! When your own code mystifies or surprises you never accept that. Dig deeper. Catch yourself engaging in magical thinking. If it worked yesterday, and not today, then something changed. Similar story as  It worked on my machine, why doestn’t it work in production?  Both of these are a symptom of magical engineering thinking. It’s just a computer. If the behavior changed, then something cause that change in the behavior. Methodically go through each thing that might be different and, like a scientist (or Sherlock) figure out what it was. Don’t be satisfied with blind luck Copying some code without knowing what is going on is not a good idea. Eventually it will come back to haunt you. Be really curious!. If a certain change fixed the problem, investigate until you understand how it fixed the problem. Learn to Debug Debugging is a craft in itself. Approach it like a scientist. Don’t poke blindly at the code, or solve the problem just by thinking about it. Have hypotheses to test. Do experiments. When your program blows up always stop and read the error messages. Catch yourself jumpint to conclusions or seeing what’s not there. Fight the impulse that you know what must have failed. Often the right answer is right there in the error message. It might be buried in the middle of a lot of noisy trace output, but discipline yourself to actually read it. If you think you spot a code smell always come back and eradicate it Train yourself to recognize (and HATE) code smells. Like nails on a blackboard, badly designed code should make your stomach turn or your skin crawl. Never, Ever Cut and Paste code. DRY is a law. If you see any duplicated code it is almost always a bad thing. Look for it and kill it. Learn how to Refactor This is a fundamental coding skill. When you see non-dry code or other violations, refactor ruthlessly. Never leave dead code behind** Delete it. Always keep your files, methods and functions short** Depending on the language and the program, the right number may vary. But a method that has more than 20 lines is almost always a serious code smell. A guideline would be 10 lines. When programming always use a source control system. It’s your safety net. This is especially true when working with other programmers. Learn your SCS tool so you are never reluctant to use it. When designing software, always keep concerns as separate as possible. Design for loose coupling. Pay attention to the Single Responsibility principle. Whether it’s a single class or function, a subsystem or module, or a whole system, minimize dependencies. Learn about dependency injection and other techniques for decoupling. When doing object oriented programming always avoid using class inheritence While tempting, it is almost always better to avoid using inheritence in your class design. It brings undesireable coupling with little benefit that could be had in a simpler way. When programming always use ‘intention revealing names’ Chosing the right names for classes, variables, methods is one of the best ways to ‘document’ your code. Follow your language’s naming conventions closely and then create names that reveal your intention. Name things after what they do, not after how they work! Also make sure names are internally consistent. (Ref: Intention Revealing Names) When programming, always comment your code, but not too much. The exact line is a matter of (fervent) debate but it is almost universally accepted that having no comments is a bad idea and that its easy to have too many comments. Keep your comments at the start of each source file, and at the start of each method. Occasionally you might want to put a few lines of comments inline. But that desire often alerts you to a refactoring opportunity. When learning new things never fall in love with the shiny toys It’s ok to be proud in your expertise and trying to perfect your craft. But platforms and languages come and go, and you must remain alert to newer and better ways to solve problems as they are invented. Don’t fall in love with a language or platform. It will change and the specific details you memorized will eventually become useless. Credits Many of these are from books, blogs and my own experience. I will list all the credits that I can identify but I think in some cases these rules are so deeply embedded that I cannot recall where I got them from. If you see sonething that you think you came up with, I appologize! Practices of a Professional Developer by Klaus Hebsgaard Practical Object Oriented Design in Ruby by Sandy Metz The Mythical Man Month by Fred Brooks The Pragmatic Programmer by David Thomas Debugging: The Science of Deduction ", "tags": "", "loc": "/content/topics/engineering/se_rules_of_thumb/" },

        {"title": "Big Data (http://bit.ly/bigdataslides)", "text": "Target Stores Problem: Get customers to do all their shopping at Target People shop for different things in different places However new parents have no time to shop and can be convinced Birth records are public. Baraged with promotion at that point. Goal: find out and start marketing before baby is born! Statistical analysis detected among shoppers who had signed up for the  Baby Register  bought: More lotion More calcium supplements More cotton balls and soap etc. So: Begin marketing to them early. However: Unintended side effects What is  Big Data  As usual, a new term has many varied definitions Huge amounts of data being collected because of advances in technology Online transactions Electronic Records Online behavior Instrumentation and automatic intake Advances in Computation and Statistics Process the data in real time New kinds of databases (beyond tabular  SQL  databases) Sources of the big data Science (Genomics, Weather, …) Business (Amazon, Google, …) Government (Medicare, Obamacare, …) Key Technology Trends Databases: Column databases, No SQL Databases MapReduce: Computational architecture for mass scaling Cloud Computing Challenges  Big Data Hubris  - Just because you have a lot of data  Bad Data  - Google Flu badly failed to predict. Search for Flu Remedy  does not mean I have flu  Correlation vs. Causation  - Deep statistical insight and humility required  Gaming the System  - Grading or student performance based on analysis of essays Links Google NGram Viewer Google flu How Target Figured Out… How Companies Learn Your Secrets Big Data Under Attack Eight Proglems with Big Data ", "tags": "", "loc": "/content/topics/entrep/big_data/" },

        {"title": "Company Founding Scenario", "text": "Feb 2013: Chris is a senior in college, and has a great idea for a product, and spends senior year (spring term) working many hours refining the idea into a mockup. Senioritis, you know? Many discussions with other students improves and refines the idea. May 2013: Chris’ friend Dana is interested in helping on the product. It turns out that Dana has experience from courses and also hacking on the side, and knows just how to build a working prototype. It becomes a practically full time obsession for the two of them, and together Chris and Dana continue to refine the project and get feedback. During the summer and fall, Dana writes a lot of software, which is a central part of the project. Jan 2014: Dana and Chris realize that they have a knowledge gap. Chris is the product visionary with strong technical chops. Dana is the hands-on coder and has developed a majority of the code. However to be able to pay the bills they decide that they need to raise money and to have more business expertise. They have no clue how to do this, but a friend of a friend introduces them to Alex. They really hit it off with Alex, who is very experienced, has been involved in a startup before and knows several angels very well. Questions to discuss. There are no correct answers. Imagine yourself in the actual situation and ask yourself what your position would be and how you would defend it: When do you think is the right time to start thinking about incorporating, realistically, and why? When do you think the three individuals should assign a ‘title’ to themselves, 1. what titles would you suggest, and why? Who do you think may legitimately call themselves a  founder , a  co-founder , or just an  early member of the team  and why? What is a fair way to allot ‘ownership’ to the three individuals and why? ", "tags": "", "loc": "/content/topics/entrep/company_founding_scenario/" },

        {"title": "Innovators Dilemma", "text": "Disruptive Innovation:  The Innovators Dilemma  When an innovation in technology changes it in a way that takes it from a specialized, expensive, niche market applicability, to a price and performance point where it can be broadly applied The Innovators Dilemma: Should you embrace or ignore a new technology to address your existing business? # Some History Web based applications MSFT vs. Google eRoom -> Hotmail -> Google Docs Ms Office# -> Live Office How about, these, are they examples? Segway Keurig Coffee Innovator’s Dilemma Scenario A new technology comes around which solves an existing ‘problem’ in a way that is not advantageous to the existing major users/customers/revenue providers Established players are not in a position to capitalize on them because this is not what their existing customers are demanding. In fact it would be negative. A new player may be able to identify a market in which the new technology’s drawbacks are actually somehow advantages. It goes after that market, all the while perfecting the technology getting it more and more ready for the larger market When the time is right, the new player if they bet right may be able to go after the larger market, but the established player finds itself behind in the new technology and is blown out of the water. Example Performance can be: MPG of a car, or Power of a handheld vacuum cleaner. Other examples? References The Innovators Solution, Clay Christensen The Innovators Dilemma, Clay Christensen ", "tags": "", "loc": "/content/topics/entrep/innovators_dilemma/" },

        {"title": "Presentation Hints and Tips", "text": "Presentation Hints and tips Content of slides Each presentation needs to be self-contained, in other words, you need to make sure it tells a story. This includes an opening slide or two to set the context And a closing slide or two drawing some comclusions. Without that the presentation is not meaningful on its own. Any diagrams, paper prototypes, and other illustrations need to be presented and explained so that the audience can understand and be engaged. Style Rehearse/Practice! A presentation is a kind of performance. Be familiar with the material so you don’t umm and mumm as if you are seeing the material for the first time. Watch your pacing. Speak clearly and in complete sentences. Keep to the time limit. Keep questions to the end. Work on the handoffs between the speakers to make them as smooth as possible. Make sure your equipment works. Bring any connectors or other gadgets you will need. Keep in mind that no one has seen this presentation before, and at least one person in the audience has never heard of your project. Watch your body language! Are you energetic, engaged? If you don’t care, your listener will not either! ", "tags": "", "loc": "/content/topics/entrep/presentation_hints_tips/" },

        {"title": "Real World Survival Kit", "text": " Disclaimer This is one person’s view. Your Mileage May Vary! Networking Everyone join LinkedIn right now while I wait Everyone connect to me, at least Pito’s patented networking technique When you meet someone interesting, make effort to make a connection. Get contact info. Use spreadsheet (people, names, email, date of last convo, interest) personal details as well - not just contact info, why and how you met them Contact every 6 months. Remind the person where they know you from. Objective of conversation - have a purpose Give them something of interest to them. Assume that you have something interesting to say. Linkedin easier to get in touch with people in specific areas (Connect with friends of friends) Put updated information on Linkedin, which has ability to export a resume like PDF Resumes Who looks at Resumes How do they do it When does a resume turn into an interview Who does the next interview? Phone screens Preparing Doing well or not well during a screen Interviews How to dress and behave How to play up your strengths when you have little to no technical experience in an internship you’re interested in. How to sell yourself What if you’re not confident in my past experiences. When finding yourself out of your depth skill set wise, how can you emphasize your other strong qualities for a position? Classic Interview Gambits Difficult questions What salary do you want? When can you start? After the interview/screen Best way to follow up after a career fair or after a meeting Follow up email When to call to ask status Jobs Companies: Big and small Whats a lifestyle business? Geographic considerations Becoming a contractor or consultant What does a consultant really do? Taxes and benefits Internships etc. Some companies do internships Some try to do internship to hire ", "tags": "", "loc": "/content/topics/entrep/real_world/" },

        {"title": "Real World Survival Kit Mob Notes", "text": " Resumes No need for permanent address Leadership and Activities is good, but try and have a special qualifications section, put that at very top! Why is that special? competitive advantage/ What makes you special? (professionally) How will you benefit the Company? Put details about activities/accomplishments, not just a title add more detail about more important sections of resume Have dates People read resumes in  two seconds ; think of yourself as a product. Put skills etc. in priority order (what you know best goes first) make sure skills good and important One page resume rule Older things generally less important Personalize resume based on job/job type (within reason) It is an ongoing process Education section not necessary espec. high school Color is OK! make sure black and white version of your colored resume looks just as good Show, don’t tell. Don’t try and spend a whole page writing out your personality. You won’t have any room for other things and it will be dificult to read Career Objective First sentence of resume state what you want from the job (Written in the frame of the reader) Should be in cover letter as well Make it consistent and relatively specific Phone Screens Skill Based pick out parts of resume, more description and detail about what you did Know background of the company have a question or two ready about the company Try to be positive about the company, even if you have doubts, at least until you get a job offer Make sure they are relevant Know everything on your resume review older projects Followups Short thank you - sneek in something about wanting to talk more Send a link or potentially more information that came up in your conversation If you don’t have the interviewer’s contact info, email it to the contact you have and ask them to forward it Feel free to followup on your followup After two emails, don’t continue Don’t expect a response from just a resume or even a phone screen. There should be one from an interview Portfolio Showcases particular pieces of work you are proud of. Pictures, schematics, essays, videos, etc. Have a project that you released into the  real  world Something you had a major role in (can say it is your work) Types of Companies Large company fewer interactions outside of department (less personal) more formality takes longer to get things done Laden with process/politics/paperwork etc. Offers a ton of projects; Variety of passions/projects, more opportunities can get laid off out of nowhere - less connection between you and your job security Less scrutiny on each individual employee Structure Small companies Get involved in a lot of projects very easily = more impact No process, take initiative to get things done (fix your own problems) very focused; Lives & breathes the one project - not good if you want to experience more than one type of thing Earlier in your life, it is easier to take risk No room/limited room for mistakes (Spotlight) Easy access to higher-ups Company depends more on you A whole buncha fun, all of the time Conversely, a whole buncha work, all of the time  How funded are you guys?  or CrunchBase (http://www.crunchbase.com/) Differences: more beaurocracy and processes in large companies, whereas small companies demand more self-reliance and are more focused Don’t assume that any job will be secure/last forever Can be a financial issue but also means that you aren’t stuck in a job for life find out about the runway for startups May be easier to get a job if willing to move to an area with fewer people with your skill set Lifestyle Business Doesn’t grow (not designed to grow exponentially) Gives a decent, liveable salary–supports the lifestyle its employees want to maintain The lack of prospective growth can hurt the attitude of employees (cause lack of motivation) Contractor vs. Consultant Mostly the same, self employed and not working directly as an employee; more of how you want to position yourself Implication of contractor - do a lot of work quickly for the compnay Consultant- more of an advising position Consultant would work with the company, contractor for it. Taxes and Benefits Some companies withhold taxes automatically 401K- deposits are not taxed Some companies match a portion of salary 5% match - they will match up to 5% of your income Stock purchase plan vesting - you can buy stock but you cannot get it unless you work at the company for x amount of time Significance of each benefit depends on person ", "tags": "", "loc": "/content/topics/entrep/real_world_details/" },

        {"title": "Starting a company", "text": "Company Founding Incorporation When is it a good idea What are the key reasons forcing the decision? Types of corporations Founding team What is a founder and why does it matter?  Can I be a founder too?  Equity How to divide up the pie Stock options and the option pool Why it exists and how it works Vesting Percentages Building a company Hiring Who should be on the founding team? interviewing How fast do you hire? What do you look for? How do you decide? Company Culture Titles Salaries - how much? Giving feedback Fairness Benefits Offices, office space, remote work, dogs Secrecy/Confidentiality When things go wrong Firing Layoffs Legal issues Lawsuits ", "tags": "", "loc": "/content/topics/entrep/starting_company/" },

        {"title": "Startup Funding", "text": "Funding Models Different Funding Models Friends and Family Consulting/Work on the side Angels - Individuals or in groups (e.g. Walnut or Common Angels) Venture Capital - Organized as funds - two sided (e.g. North Bridge or NEA) Incubators/Seed funding companies (e.g. Y-Combinator or TechStars) Crowdfunding (Banks) Reference: Different Kinds of Investors Venture Capital What is the process Rounds of investment How valuation changes Term sheets Liquidation preferences will turn your hair grey. Ideal First Round Funding Terms Sequence of events Founders have an idea - investors have money It’s a contract between founders and investors Result is a new corporation owned partially by founder and partially by investors Look at eRoom term sheet. Rounds of financing What is a round How does it end? Liquidity Event Seed/Angel, A-Round, B-Round, … IPO or Acquisition* Let’s work an example on the whiteboard What you negotiate over Valuation and Investment amount are the key parameters How term sheets turn into  deals  What’s a seed deal? Should you or shouldn’t you? What are VC firms really? General and Limited Partners Why do people love/hate vcs? ", "tags": "", "loc": "/content/topics/entrep/startup_funding/" },

        {"title": "Working in teams", "text": "These notes are based on experience with student run teams. I have seen them succeed and have seen them struggle. Remember, you are not trying to become best friends with your teammates. You are trying to get something done! Norms Your first meeting is very important. Each member honestly say what your personal goals are for this course: This course is my most important, I really care and will do anything to be successful Or, I have a heavy courseload, I will do what I can but I have to balance Or, I am perfectly happy with a  B , don’t expect intensity from me. If everyone knows each other’s perspective this will set expectations Each member of the team is responsible for their own work and for the welbeing of the team Think about how you will make decisions: Democratic vote Decide or chose a leader to have final say Divide up the domain (front end/back end/ etc) and assign it to people. Technical Create a github repository for all your code from the very start Create a Trello or PivotalTracker project to keep track of tasks and assignments Create a Google Drive for documents (specs etc.) Partition the work as much as you can to allow each person a bit of independence Conflict Working in teams can suddenly become CHALLENGING There is a non-zero probability that you will not get along with someone in your team Be ready for this and take it in stride.  Whoops, there it is!  You are not married, you are just working on this project, now Don’t try to resolve the conflict in email, it never works! One of the big challenges is to find time to meet, so try to be flexible. ", "tags": "", "loc": "/content/topics/entrep/working_in_teams/" },

        {"title": "Elevator Pitch exercise", "text": " We are going to try our hand at designing an elevator pitch for a product or service that you know well. Think about the purposes of an elevator pitch like we discussed in class, or any references you can find on the web. You can also refer to Elevator Pitch Break into teams of 3 (different from the Term Project teams) and discuss the problem. Come up with the best elevator pitch for one of these products would be. While you don’t want a fixed script you do want to make sure you write down all the key points or phrases to make sure you don’t leave anything out. Meet with your sister team and compare what you came up with and then refine to produce one unified result. Prepare to deliver the pitch and also give an explanation of what you are trying to achieve with each piece of it. Here’s the list Team 1 and 2: Harley Davidson Team 3 and 4: Godiva Chocolates Team 5 and 6: Brandeis University Team 7 and 8: Amazon Team 9 and 10: NEST Thermostat Time: 10 + 10 minutes ", "tags": "", "loc": "/content/topics/exercises/elevator_pitch_exercise/" },

        {"title": "Peer Feedback Session", "text": " Read the other team’s Draft 0.3 of Frame 1 Report Have a discussion and constructive criticism Be open minded! Be honest! Reviewee and reviewer teams: Listen carefully and take notes Consider: Effort/Seriousness of purpose. How well is the team thinking in a Lean Startup way. Are they going to be able to develop the idea to a real business plan? Can you see the effort put into it? How well is their presentation in the actual document> Product How carefully is the team thinking about the product? How can their product be improved? How plausible is the concept? Try not to focus only on little details. Is there a pivot, scale up or down or any other kind of pivot? Prospects: How realistic is this product. Can you see an angel investor putting in $100K to fund it’s initial development and prototype? How would it do on Kickstarter? Can you imagine a persuasive video for it? How would it do on Sharktank? Take 30 minutes; Feel free to leave the room for your meetings. Make sure you capture a response to each of the 3 considerations above and include a grade with it. Homework for next class will be: A write up of how you assessed the three considerations of the other team’s product. A write up summarizing what the other team and you heard in terms of feedback about your product. ", "tags": "", "loc": "/content/topics/exercises/frame_1_report_peer_review/" },

        {"title": "NEST thermostat - UX", "text": " Nest Thremostat Technical Architecture Break into 3 teams randomly and work on this for 10 minutes Discuss and come up with a block diagram which reflects all the major elements of the architecture of the whole NEST system, not just the thermostat alone, and not just what is installed in the owner’s home. Also draw lines between the elements that indicate how they talk to each other. Present your findings to the class (3 minutes each team.) ", "tags": "", "loc": "/content/topics/exercises/nest_ux_exercise/" },

        {"title": "Pricing Model Exercise", "text": "Excercise 4 groups, random, 20 minutes You are a 10 year old entrepreneur running a neighborhood lemonade stand. You want to make some money doing this. What are some models that you could put in place? Charge 50 cents per glass of lemonade Chare 25 cents for a small, and $1.00 for a large lemonade There are many other possibilities Work with your team on the following Come up with many variants of pricing models as you can Try to come up with a classification of those models, in other words look for the patterns, for example: what is being charged for, what is free? who is paying, who is getting something for free, what costs are fixed and which ones are variable, and so on. Prepare to present the results using the whiteboard if necessary. Discuss What are some principles we learn from this exercise? ", "tags": "", "loc": "/content/topics/exercises/pricing_model_exercise/" },

        {"title": "User Experience Site Review", "text": "Let’s look at some sites Facebook- Something you know well. Point out a few good and a few bad user interface elements. Have you ever tried to get someone (like a parent) to use Facebook? What worked and what did not? Noteflight - Can you or can’t you assume that the user is a musician, or knows music notation? Split into groups of 2, each pick a different one from below without checking what it is. Analyze and report back: What’s good and/or bad about each one? Refer back to all the principles Site 1 Site 2 Site 3 Site 4 Site 5 Site 6 Site 7 ", "tags": "", "loc": "/content/topics/exercises/ux_review_exercise/" },

        {"title": "CSS (the good stuff)", "text": "Intro CSS stands for Cascading Style Sheets Key word there is  Style  as in  what things look like  HTML by itself, when rendered in a browser, shows everything in a vanilla  black and white  style HTML file linked to a corresponding CSS with a link tag in the head section of the html file: <link href= css/bootstrap.min.css  rel= stylesheet  type= text/css > You can have multiple <link>s to css files, and they act as one big file The following are NOT RECOMMENDED You can have css statements directly inside the <head> section of an html file You can even have css statements attached directly to an html tag, e.g. <p style= font-size:200%; > Purpose CSS sole purpose is to add ‘styling’ to html pages Styling: color, typography, spacing, positioning, animation, and so on However it can sometimes look like it’s adding major new functionality Discussion: CSS experts: are these statements 100% true? Can you find exceptions? Syntax, in general Syntax of css is very simple, yet very powerful. Behavior can be confusing. How powerful: Look at CSS Zen Garden Example p { color:red; text-align:center; } p is the selector. Indicates what tag(s) we want to add the style to {} enumerates the styles color: red; parsed as property : value Don’t forget the semicolon after the property:value (but not after the {}) Note: There are huge numbers of properties and values: CSS Reference CSS Selectors Could write a whole course just on them (exagerating) Building blocks: tag itself, e.g. p, or li, or body etc. (see html doc) class which is decorated with a period, so, for examle, .chapter id which is decorated with a # sing, so, for example, #error The important selectors are just tag, class and id. The challenge is in how they are combined. Selector combinations CSS Element ul { font-size: 12px; } Class .front-page { font-size: 125%; } ID #remark { font-style: italic; } Compound ul#remark.front-page { display: none; } Compound .front-page.headline { background: light-blue; } Simple grouping h1, h2, h3 { color: red; } Descendant .front-page p { font-style: bold; }   …there are more subtler cases. Example CSS: p.warning { color: red; } HTML: <p class= warning > It's important to remember to test the brakes! <p> Notice that it’s really hard to tell what CSS does without looking at the related html Box Model Crucial to understand when working with spacing See Box Bodel Tools  Web Inspector  in your browser (Chrome, Safari, Firefox) Reference: W3CSchools CSS Intro Experiment: CSS Desk ", "tags": "", "loc": "/content/topics/formats/css/" },

        {"title": "ERB (with Rails)", "text": "Intro to ERB  Embedded Ruby  One of a class of ‘template languages’ There are many They do a simple job (used to be called  mail merge ) What it does Erb file without any `` blocks remains unchanged `` must contain legal ruby code Let’s look at ErbDemo The code between the angle brackets is evaluated. *And only in the case of `` it’s inserted into the resulting text How it works with Rails ERBs are used primarily in views (also known as view templates in rails) Rails has numerous  helper  methods that work very nicely with erb In  routes.rb : resource or get or path or other command  automatically  defines one or more helpers. In the example below,  sessions_path  was generated by the resources :sessions line in routes.rb ** Reference:** Rails Form Helpers Example <% form_for(:sessions, url: sessions_path) do |f| %> <div> email: <%= f.text_field :email %> </div> <div> password: <%= f.password_field :password %> </div> <%= f.submit  Sign in  %> <% end %> ", "tags": "", "loc": "/content/topics/formats/erb/" },

        {"title": "HTML - Hypertext Markup Language", "text": "Introduction Remember HTML is one of the core standards of the www: html, http, uri HTML is a variant of XML. Many versions. Current/latest is html5 Minimum Example General structure of all html files. They all have this. <!DOCTYPE html> <html> <head> </head> <body> </body> </html> Tags Very common tags <h1>Largest header</h1> <a href= http://www.google.com >Link tag</a> <p>A paragraph of text</p> <ul>A bulleted (unordered) list</ul> <ol>A numbered (ordered) list</ol> <li>An item in either kind of list</li> <span>a named selection of text or other info</span> <div>a named block of text or other in a new rectangular block</div> <html>...</html> <head>...</head> <body>...</body> Discussion: What other tags would you say are ‘very common’? More about tags There are a lot lot lot of tags: WWWSchools Tags Expect to look up the not so common ones. Or Play with them online There are many tools for ‘experimenting’: Online Playgrounds for html css and js Like in xml, html tags can and often do have attributes Most common attributes class= and id= In the language of xml and html, these are attributes e.g. <h1 class= chapter >Chapter 1</h1> e.g. <div class= subchapter supplement >Supplementary</div> e.g. <p id= error >Please check the ignition</p> Important! These don’t do anything in html. («- notice I said  IN HTML ) They just create names for elements of the page Names are used in other contexts: css and javascript They can be combined, e.g. <p id= error urgent  class= homework >Please check the ignition</p> Links and Forms and http Remember the HTTP verbs: GET, PUT, POST and DELETE (there are a few more) When I type a URL into the browser, it generates an HTTP GET with that URL When I click on a link (<a href= http://varperrater.com/configuration/23-12-933 >show config</a>) the browser also generates an HTTP GET to that URL. Look at the form code below. When I press  Sign In! , it generates a  POST  to relative url /sessions, with two parameters with these names:  sessions[email]  and  sessions[password]  <h3>Please Log In!</h3> <form action= /sessions  method= post > <div> email: <input id= sessions_email  name= sessions[email]  type= text  /> </div> <div> password: <input id= sessions_password  name= sessions[password]  type= password  /> </div> <input name= commit  type= submit  value= Sign in  /> </form> ", "tags": "", "loc": "/content/topics/formats/html/" },

        {"title": "JSON (and JSON)", "text": "Introduction Very very similar (see this and this) JSON stands for  javascript object notation  and YAML stands for  yet another markup language  Used in similar applications as xml. Were born because XML was considered too verbose or rich for many more limited applications. Json is much better known at this point. Example  menu : {  id :  file ,  value :  File ,  popup : {  menuitem : [ { value :  New ,  onclick :  CreateNewDoc() }, { value :  Open ,  onclick :  OpenDoc() }, { value :  Close ,  onclick :  CloseDoc() } ] } } The same text expressed as XML: <menu id= file  value= File > <popup> <menuitem value= New  onclick= CreateNewDoc()  /> <menuitem value= Open  onclick= OpenDoc()  /> <menuitem value= Close  onclick= CloseDoc()  /> </popup> </menu> Live coding 1require 'json' 2 3puts  Convert from an array to Json:  4puts [1,2,3].to_json 5 6puts  \nConvert from a hash to json:  7puts ({ name:  Jonathan , birthday:  Dec 1, 1991  }.to_json) 8 9puts  \nConvert from an arbitrary class:  10class Car 11 def initialize make, model 12 @make = make 13 @model = model 14 end 15 16 def to_json 17 {'make' => @make, 'model' => @model}.to_json 18 end 19end 20 21c = Car.new( Toyota ,  Corlla ) 22puts c.to_json 23 24puts  \nAnd the other way around  25name_hash = '{ name :  Pito ,  town :  Arlington }' 26puts JSON.parse(name_hash) 27 28name_list_hash = '[{ name :  Pito ,  town :  Arlington }, 29 { name :  Chris ,  town :  Willemstad }, 30 { name :  Amin ,  town :  Lafayette }]' 31puts JSON.parse(name_list_hash) 32 33puts  \n*** How about converting from XML to JSON?  34require 'xmlsimple' 35 36xml = <<EOS 37<?xml version= 1.0  encoding= UTF-8 ?> 38<student> 39 <name> 40 Pito Salas 41 </name> 42 <gender> 43 male 44 </gender> 45</student> 46EOS 47 48xml_clean = xml.gsub(/\s/, '') 49xml_hash = XmlSimple.xml_in(xml_clean , { 'ForceArray' => false }) 50xml_json = xml_hash.to_json 51 52puts  Input xml string: , xml_clean 53puts  \nConverted to a hash: , xml_hash 54puts  \nConverted to a json string: , xml_json 55 ", "tags": "", "loc": "/content/topics/formats/json/" },

        {"title": "XML - Extensible Markup Language", "text": "Background Extremely commonly used. Graddaddy of them all. Totally abstract. Self-describing, cross platform format for hierarchical data Especially in cross-platform/cross-architecture applications Very good support for different character sets Basis for a lot of  open data  Example <?xml version= 1.0  encoding= UTF-8 ?> <student> <name> Pito Salas </name> <gender> male </gender> </student> Characteristics Precise nesting with and (case sensitive) Attributes embedded in tags go to google More info Here’s an example of a really big xml file: Voting Data File An excellent viewer and editor for XML is Xmplify Read more about XML tags at XML TUtorial Discussion: When would you use XML? If you didn’t have XML what would you use? ", "tags": "", "loc": "/content/topics/formats/xml/" },

        {"title": "Affordances", "text": " An affordance is some characteristic of an object that communicates how it is to be operated. A keyhole in a lock tells me that I need a key and where to insert it. A handle on a fridge tells me how to pull it. A bottlecap on a bottle of beer tells me something. But does it tell me to use a bottle opener or just unscrew it? With this context, look around your daily world (room, office, campus) for affordances everywere. Find and photograph a few examples where (visible) affordances were absent, or communicated the wrong thing. Deliverable: Post your photos to Piazza with commentary. ", "tags": "", "loc": "/content/topics/homeworks/hw_affordances/" },

        {"title": "Paper Prototyping homework", "text": " Practice Paper Prototyping and developing a user experience flow chart. Read: Paper Prototyping, 7 Myths about Paper Prototyping, How to create a UX flow chart With your team, develop a set of single screen paper prototypes connected by arrows that indicate when a user action or event leas to another screen or page. I refer to this as your application process flow. Focus more on the connections between the screens than making super detailed screens. Use separate sheets of paper/images, one for each screen with indications of how you get to another screen. I discourage you from using html or other tools because you are always better off doing a sketch on paper before going to any tools. Team Deliverable: Piazza post with links to one or more ‘legible’ images. Be prepared to share them in class. ", "tags": "", "loc": "/content/topics/homeworks/hw_paper_prototyping/" },

        {"title": "Toy Form Rails Example", "text": "Part 1: Step by Step Create a new rails app (called lostandfound): rails new lostandfound Create a scaffold for the one and only model: rails generate scaffold Item title:string description:text type:string Don’t forget to rake db:migrate Run the server to make sure that you can list, create, change, delete items Add a route to allow the following url: /items/search. It should go to a controller action 1.tem#search. Refer to Rails Routing from the Outside In: 1.int: you will be adding a  Collection Route  (section 2.10.2) Use rake routes to see that this route in fact now exists Add an action to the ItemController called  search  Add a view to views/items that will contain the search form, and define a form in that new view that 1.ill be the search form, using what you learned reading Rails Guide on Form Helpers. For now only worry about displaying the form including the fields for title, description and type, 1.nd also have a submit box. You don’t need to actually make it search. If you want to be fancy instead of using a text box for the  type  of item, make it a drop down box allowing a specified options such as  book ,  clothing ,  cellphone ,  computer  Make the form actually search. You will have to add an additional controller action to take the info from the form and perform an actual search. Part 2 - Expand the example Update Database Modify the migration for item so that the item database has the following fields: title:string description: text, owner: text, type_id: integer Add a new table called  types  with the following fields: title: string, description: string You should have two files in db/migrations (not three!) Use rake db:migrate:reset to force the database to be deleted and recreated and both migrations reapplied. Add seed data for 20 lost and found items Create an appropriate 1-many relationship between them Test what you have so far to make sure it works. Update UI Add Bootstrap css files Make the form you created in Part 1  Pretty  Add drop down menu to the search form for the  type  and populate it from the second table you created Make the search actually work and generate an attractive list of matching lost and found items Allow user to pick AND and OR Add an additional drop down at the top of the search field that says, Serch for  Any of these conditions (OR)  vs.  All of these conditions (AND)  Update the back end (the controller action) to distinguish those two cases. ", "tags": "", "loc": "/content/topics/homeworks/hw_railsform/" },

        {"title": "Reflection on Entrepreneurship", "text": " I would like you to think back about your expectations and hopes about this course before you took it and what you know now. Write up a retrospective blog post thinking about questions such as: To what extent has it lived up to them? How do you feel you’ve changed your views on entrepreneurship and what it takes to be one? Do you see a role for yourself as an entrepreneur in the future? How has your thinking and approach about starting something brand new changed? What have I learned about myself as an entrepreneur? How have I grown? In what way do I feel better prepared now? In what way have I clarified what I want to do when I graduate? Deliverable: Write up your reflection as a post. ", "tags": "", "loc": "/content/topics/homeworks/hw_reflection_entrepreneurship/" },

        {"title": "Reflection on Presentations", "text": " You’ve now prepared and delivered one or more presentations. I’d like you to reflect on that process. How did you approach the preperation? Why did you decide to include what you did, how did you think about that? How did you feel just before you went on? Did you feel well prepared, were you nervous? If you’ve done more than one for this class, how was the second one different from the one before it? Did the presentation go as you hoped? Did anything surprise you? In retrospect, do you feel that it went as well as it could? What do you think you would do differently next time? What would you keep the same? What is the importance of giving presentations to an entrepreneur? Deliverable: Write up your reflection as a post. ", "tags": "", "loc": "/content/topics/homeworks/hw_reflection_presentations/" },

        {"title": "Reflection on team work", "text": " You have been working as a member of a small team. I would like you to reflect on that experience in writing. Here are some questions to ponder: How effective were you as a team member? Did you enjoy it? Sometimes people on a team take on different roles by virtue simply of their personality and talents. What role did you take on? Often in teams conflicts arise despite everyone’s best intentions. Did any conflict arise in your team? Were you part of the problem or part of the solution? What did you learn about yourself during those difficult times? Overall what do you see as the importance of being an effective team member? What skills or talents do you bring to the table? Do you think it is something that one can learn to do better? Deliverable: Write up your reflection as a post. ", "tags": "", "loc": "/content/topics/homeworks/hw_reflection_teamwork/" },

        {"title": "Schema Design Exercises", "text": "Notation table users id: integer first_name: text last_name: text dob: date department_id: integer table departments id: integer name: text budget: float departments has_many users Assignment Design as many of these as you can Use the notation above (not a diagram or other fancy thing) Department and employees an employee has a name and a birthday a department has a name, a code, and a budget an employee works in exactly one department Recipes A recipe has one or more ingredients, one or more steps and an author An ingredient has a name, an amount, and an optional sentence of instruction A step has a name, a number and a sentence of text University A student has a first and last name, and a date of birth A university has a name A university has multiple departments A student belongs to exactly one university A student can have zero or more majors (departments) A course has a number and is taught in a department A student is enrolled in 0 or more courses, for which they can have a grade Store A store has a name and a url (e.g. amazon.com) A store has many departments and many products Products are in one or more categories, have a name and a price A customer has a name and a credit limit The customer can place an order An order has one or more products, and a quantity ordered for each An order also has a ship date, a tax amount, and a shipping charge ", "tags": "", "loc": "/content/topics/homeworks/hw_schema_design/" },

        {"title": "TDD homework", "text": "General Don’t use inheritance! Test ALL the methods (including initialize if applicable) Here’s an example that gives the whole thing away: TDD demo NB: The concepts are the same, but the syntax of minitest, minitest/spec and rspec are a little differenbt. I recommned minitest/spec Instructions Develop the following simple program using Test Driven Development Meaning, write the tests FIRST and then write the classes You may use minitest, minitest/spec or rspec. I recommend minitest/spec. Specifics - what you will need A class called Point to represent a point on a plane (i.e. x and y coordinates, floats, representing meters from the origin) A class called Rectangnle that represents a rectangle with two points Rectangle#area (in square meters) A class called Trangle that represents a triange with three points. Triangle#area (in square meters) A class called Circle that represents a circle by a point and a radius (float) Circle#area (in square meters) A class called Scene that represents a scene consisting of one or more rectangles, circles and triangles. Scene#shape_count (how many shapes there are) Scene#total_area (sum of all the areas even if they overlap; don’t worry about computing intersections.) Scene#add_shape (adds a shape to the scene) Scene#remove_shape (removes a shape from the scene) If you want to go further If you want to push yourself add some more methods by writing a test, and then implementing them. For example, Scene#copy_shape, Shape#resize_rectangle, Shape#is_square?, Line.new(point, point), Rectangle(point, point), Line#paralel(Line), are possible ways to go further. ", "tags": "", "loc": "/content/topics/homeworks/hw_tdd/" },

        {"title": "Build Measure Learn", "text": " Startup needs to: Decide what your goals are right now (they change over time!) Analyze them to determine metrics for growth and success Loop to tune the engine of growth: Measure current metrics Conduct Experiments to try and move reality towards Rinse and repeat until you have tuned your engine AKA:  Iterating  Put in different terms: Are you making your product better? How do you know? Are the changes you are making affecting the measures you care about? How do you decide what measures you care about? Back to first principle:  Is this a business or a hobby?  Basic pattern: Use an MVP to get real data to test a belief Make a series of micro changes (parallel or serial) Measure whether metrics are better or worse When you feel like you are not making real progress Perhaps pivot if micro changes are not moving the needle in the right direction Start with the highest return (cost/risk/reward) assumption Illustration ", "tags": "", "loc": "/content/topics/leanstartup/build_measure_learn/" },

        {"title": "Business Model Canvas", "text": "Background of the Business Model Canvas One way to sructure strategic planning, analysis Checklist helps cover all the bases when designing a business model Handy if have one of several possibilities that you are examining Note that a single business might operate based on two different models (but it’s more complex to do that and usually not the right way to go.) Building Blocks of a business model (From book: Business Model Generation) Value Proposition (the offer) What problem do we solve for the customer? What product/service do we deliver to the customer? How do we do that compared to what they do today? There’s more than  solving a totally new problem/needs  Examples: performance, customization, convenience, price, etc. Customer Segments What customer or groups of customers? And who are the most important ones? What makes a distinct segment? If a set of customers require: A different offer, different channels, different types of relationships, different payment models, etc Examples: Mass market? Niche market? Segment of larger market? Two sided market? Note that you might be going after more than one! Revenue Streams (or pricing model) Per customer segment/offer, who pays and what do they pay for? Examples: simple purchase; usage fee ( pay by the drink ); subscription; licensing; in- game -purchases Channels How do you reach a customer? How do they want to be reached? Are you able to reach them in that way? You need to figure out how to: generate awareness, allow evaluation, enable purchase, deliver the product, provide after sales follow up Examples: Web site, Direct Sales, Reseller web site (e.g. Amazon), Stores, Wholesaler. Customer Relationships What kind of ongoing relationship does your customer want with you? Examples: personal email; self-service support site; face-to-face; online community; co-creation (Key) Resources Go a level deeper than just  money . Identify all the things you will need For example: expertise (we need a bigdata person), IP (we need to license music), physical (we will need a shop floor to do assembly.) (Key) Activities This might seem obvious but it’s worth calling out, because it’s so ‘obvious’ Examples: software development; packaging and shipping; manufacturing; support; marketing; manufacturing; licensing; etc. (Key) Partnerships What outside entities do you have to establish trust with for your model to work? Suppliers? Resellers? Distributors? Maybe a web distributor like Amazon? Maybe Apple, because they have to approve your app. Are you licensing something from a partner? Cost Structure ‘Simply’ all the costs needed to run the businss model Fixed costs, per-unit variable costs, per-employee variable costs Based on Key resources, key activities and key partnerships ", "tags": "", "loc": "/content/topics/leanstartup/business_model_canvas/" },

        {"title": "Business Model Intro", "text": "Business Model Term’s definition is not set in concrete (as usual) Blueprint for how a business will function Describe how a business will creates, delivers and captures value Incorporates the value proposition, the pricing, the growth model and more In a way this is the final deliverable for the term project :) Business Model Canvas Pro Tip As you watch this very brief video, keep your term project's business in mind! What is its value proposition? Customer Segments? etc. etc. References Book: Business Model Generation Poster: Business Model Canvas Another methodology with book and poster and if you want, paid courses ", "tags": "", "loc": "/content/topics/leanstartup/business_model_intro/" },

        {"title": "Cohort Analysis", "text": "What is it A metrics analysis technique Look of metrics of separate groups of users or customers Surgically measure the impact of changes, pivots, and experiments Role in a startup Just another tool Key to avoiding vanity metrics and devloping actionable metrics How? Look at the lifetime a customer and identify key stages Make sure the stages can be measured and are associated with a specific user Make sure that they are meaninful to the business and the engine of growth Measure a baseline with current product Changes can now be measured to see if they had desired impact Simple example Micro-Instagram Install app Create an account Activate account Post a photo More detailed example Review Engine of Growth Example ", "tags": "", "loc": "/content/topics/leanstartup/cohort_analysis/" },

        {"title": "Crossing the Chasm", "text": "Crossing the Chasm A concept that reminds us that the way we ‘approach’ a market changes depending on the maturity of the market From a a famous book: Crossing the Chasm, by Michael Moore, considered a seminal work Book Summary of Crossing the Chasm Technology Adoption LifeCycle Key Lessons Realize where you are in the adoption cycle. Each stage calls for a different approach Realize that each stage gets information from fans in the previous stage so you need to really make sure They are fans They communicate with the next stage Growth can easily stall when going from Early Adopters to Early Majority Innovators and Early adopters (Earlyvangelists) Seek out new technology to solve their (or their companies’) problems, not just for the sake of owning the newest technology. Don’t rely on references from others to make buying decisions. While they are in- fluenced by other early adopters, their main concern is solving a known problem. Eric Ries and Steve Blank call Early Adopters  Earlyvangelists  to reflect that they are your biggest evangelists. Earlyvangelist ", "tags": "", "loc": "/content/topics/leanstartup/crossing_chasm/" },

        {"title": "Elevator Pitch", "text": "Elevator Pitches Here’s an example, please critique it:  Do you know how when someone is new to a city or visiting it, it's hard to know the hotspots and the fun places to go? Or say you have 2 hours to kill while you wait for your flight? We're building a smartphone app which will give you a few focused recommendations based on where you are, what you want to do and how much time you have. We'll crowdsource recommendations, and have game mechanics to make it fun. We're not sure yet how we'll make money but we're thinking along the lines of coupons or sponsored recommendations. It will be designed as a platform so we can easily release it for other cities. Tips for Elevator Pitches You should have it at the tip of your tounge so when you run into the president you can answer the question:  So, what’s your business do?  in a clear, interesting, catchy, provocative manner. Purpose of an elevator pitch is to sell. To get the listener to say,  hmm, let’s sit down so you can tell me more.  An elevator pitch is meant to be spoken or read to a potential investor or board member Put yourself in the listeners shoes, really! Imagine that they say,  So What?  in response to each of your lines If there’s a very obvious objection, respond to it right away. Hook them with the first words out of your mouth. Your goal is that they say,  Tell me more! , or  Please show it to me! , or best,  I need one of those, I will pay anything for it!  ", "tags": "", "loc": "/content/topics/leanstartup/elevator_pitch/" },

        {"title": "Engine of Growth", "text": " Some basic questions to ponder Is it a business or a hobby? What is the objective? Is it sustainable? How much investment does it need? How do YOU define success? Revenue Where does the revenue come from? When does it arrive? What metrics drive it? (revenue drivers) Non-revenue goals It’s not always about money Number of people vaccinated Number of students who get an internship Number of voters who vote Some models of growth Sticky Engine of Growth (subscription) Viral (users invite other users) Paid (simple purchase, one shot) Accessory (in product purchases) ", "tags": "", "loc": "/content/topics/leanstartup/engine_of_growth_intro/" },

        {"title": "Four Questions Every Entrepreneur Should ask", "text": "Four Questions Every Entrepreneur Should Ask Do consumers recognize that they have the problem you are trying to solve? If there was a solution, would they buy it? Would they buy it from us? Can we build a solution for that problem? The tendency of all computer science, IT, entrepreneurs, everywhere, always is to start with question 4. ", "tags": "", "loc": "/content/topics/leanstartup/entrepreneur_four_questions/" },

        {"title": "Conversions", "text": " When you design your web presence, you need to decide clearly what action you want the visitor to take when they get there. How do you decide that? Well ask yourself, why do I need this web site? Do you want the user, e.g. to register? to place an order? to like you on facebook to download your app? When the user does the action, we call that ‘a conversion’ This is a term-of-art A web site can have more than one conversion. Excercise: Break up into teams and pick one of the following sites and determine what their desired action is: twitter.com, facebook.com, amazon.com, brandeis.edu, whitehose.gov, salas.com  A Good User Interface has high conversion rates and is easy to use. In other words, it’s nice to both the business side as well as the people using it.  Read this: A good UI ", "tags": "", "loc": "/content/topics/leanstartup/getting_conversions/" },

        {"title": "Scaling techniques", "text": "Article by Jason Calacanis about Scaling It’s much easier to sit in a room and dream about the killer feature that will save your startup. I’m going through this right now with Inside.com, and I see my other startups work on this as well. It’s fine to explore new features, test things, and even  build for yourself.  In fact, one of the best things to do is  build for yourself.  However, there is a point in time where you’ve created 5, 6, 7, or 10 features for your product and it’s time to say  enough  and start studying the metrics, doing user interviews, and testing. As far as I’m concerned this happens at 1,000 daily users for a consumer product and 250 daily users for an enterprise product. At that point you have enough users to solicit feedback and break people into two groups to do A/B tests. We are getting thousands of daily users at Inside.com and we are very focused on two things: a) figuring out what behaviors increase people’s time in the App and b) figuring out how to get new people into the product. Founders don’t invest in metrics & community In order to really grow a startup you need to increase your knowledge of how your product is being used. There are two basic ways to do this: study people’s behavior and talk to your users. In terms of metrics you need to figure out how people are using your product with analytics packages like Localytics (mobile), Google Analytics (web), Chartbeat (live web; disclosure, I’m an investor) and Mailchimp/Sendgrid/Dyn (mail open rates, conversions, etc.). In terms of talking to users I created three groups for Inside (alpha, beta, and delta) in the early months using a Google Group for each. I solicited members for these groups from inside the Inside.com app (literally said  email us to join our beta group to talk about new features! ). Everyone on our team joined these lists and listened. It was eye-opening: our users were wildly more sophisticated than we thought! They were really interested in very, very specific features and they were super loyal to us. Huge win. Founders don’t budget properly I don’t know what the proper budget is for startups, but I actually think growth should be at least 25% of your budget after the product is completed – perhaps 50%. The problem is that you need this huge group of people to launch a product, and after the product is done you need half that amount to maintain it. Of course, hiring 15 people for six months of building the 1.0 and then shifting gears and firing five in order to put that money to work on buying installs, ads, and doing marketing is really not practical – it’s mercenary and would kill your culture. So what most folks do is they burn $150k a month on 15 team members and an office, and once the product is in market they say  we have no budget left for marketing this awesome product!  Then they look at their resources, the team they do have, and they default back to the  feature race,  adding more features. A startup should basically fund itself with an expectation that they will spend 2/3rds of the eventual monthly budget building (say $100k) and then pop in the $50k a month in marketing in month seven when they launch and learn how to spend it effectively (or if they even should market the product – they might not want to if it’s a dog!). Founder paralysis: search for a pulse Founders get really scared right after their products launch because of the very typical  launch bump  and the eventual  pit of despair  when the press and social media stop caring about you. You have to fight the urge to be paralyzed and  search for a pulse.  Is there a  sign of life  in your product? Do folks like it enough that they can’t live without it? There is an easy way to find out: ask them. One way to phrase it is:  how much would it cost to replace my product – in time or money – if we didn’t exist ? Another way is to say  What would you replace us with?  or  How did you solve this before you found us?  If the product was, say, Thumbtack.com (I’m an investor) it would be something like,  Well, I would have to spend five hours: first calling 10 house painters, then getting five to call me back, three to visit and two to give me quotes.  That answer means,  f@#k, life without Thumbtack.com would really suck.  With a consumer product, this can be hard to judge sometimes: questions like  what would life be like without Calm.com or Vine.com?  might elicit the answers:  Well, I wouldn’t meditate regularly, if at all, without my Calm.com App,  or,  I wouldn’t laugh as much without Vine – I would miss it!  Those are valid answers, but it’s sometimes hard to put a cost on something that is just delightful. What’s the cost of losing the funniest guy at your poker game? Well, you have a boring game and folks say  I wish Pollak were here!  No dedicated growth positions Sure, everyone should be thinking about growth, but do you need a specific person in each company focused on this? When I have a growth person at one of my companies, they are solely responsible for seeking the truth around the brutal inevitabilities all founders face:  why are we not growing?  or  why is growth slowing?  or  why are we shrinking?  In order to plan for growth you need to have someone build that plan, execute that plan and study the results so the next plan can be 20% better. You need someone obsessed with this. Worse than this is a startup that does have growth positions, or positions with growth responsibility, but they are not given the authority to  grow.  Second guessing folks who you’ve hired to grow the product is worse than not having growth people – because you’re getting all of the costs and none of the benefits. Listening to the growth team is as critical as having them. What techniques are there to scale? See More Scaling Ideas How can I increase email open rates? How do I select my startup’s next market? How do I handle traffic spikes after media exposure? How do I keep my architecture stable at scale? How do I simplify my API? How do I create a brand voice for my startup? How do I attract service professionals to my marketplace? How can I increase month-to-month retention for my app? Which press outlets drive downloads? Are byline articles in Pando, Business Insider, TechCrunch, and LinkedIn worth my time? What do I do when a customer is unhappy? How do I recruit senior designers and developers with limited funding? How do I speed up my release cycle? How do I price my product for maximum growth? How do I know when to pivot my business model? How do I reduce customer churn for my SaaS company? How do I make my hardware and software work seamlessly? How do I build a push notification CMS? How do I market to a younger demographic? How can I quickly build an effective referral program? How can I scale my user acquisition with FB ads? How do I maintain a sense of community with my users while scaling? How do I get my crowdfunding campaign featured? Are infographics expensive to build? Do they drive business & how do I measure their * effectiveness ? How do I incr ease my rank in the app store? How do I write tweets that increase app installs? How can I identify new sales people that fit my culture – and won’t quit in 6 months? How do I reduce churn in my sales team? How do I streamline my manufacturing? How do I avoid liability and lawsuits? How do I onboard independent contractors? How do I test marketing techniques with a small user base? How do I best use remote workers? How do I train my devs on both ios and android? How do I recruit senior designers and devs with limited funding? Do I need to hire a growth team? How do I get actionable feedback from my users? How do I manage beta groups to test new features? How do I teach new users how to use my app? When do I censor my startup’s community? How do I take market share from a bigger competitor? Should every part of my team grow equally when scaling? When’s the right time to get acquired? How much should user feedback change my product? Where can I find testers in the very early stages of a minimum viable product? How do I get featured by Apple and Google in the App and Play stores? Should I focus my limited resources on pleasing existing customers or gaining new ones? Who should my first hire be when scaling? Should new hires have experience scaling? How quickly can I scale from one new market to the next? How do I develop strategic relationships in new markets? How do I find mentors for my startup? How do I source leads on Linkedin? How do I source candidates on Linkedin? How can I create tweets that convert to sales? How do I create brand loyalty through email? How do I acquire users in a new market? How can I prepare for seasonal spikes in traffic? How do I partition services to limit risk of a security breach? How do I transition new features from test to production environments? How do I develop strategic relationships in new markets? How do I hire a city manager capable of running a new market? How should I organize my engineering team? How do I prevent my website from crashing from too much traffic? How do I maximize my marketing budget? How can I use data as marketing material? How can I increase month to month retention for my app? How do I push notifications to millions of users? How can I increase high quality influencers on my twitter handle? How do I use AdWords to market my startup? What are the most scalable channels for customer acquisition? How do I find early customers that could become champions of my product? How do I make an awesome product video? How do I get good Yelp reviews for my startup? How do I train my devs on both ios and android? How do I limit excess inventory in manufacturing? How do I manage a remote team? How do I quickly implement user feedback into my next release? How do I develop a windows app? How do I create new apps while maintaining the quality of my core app? How do I get my revenue model right? How do I expand internationally? How transparent should I make reviews of my users? How do I take advantage of the economic environment? Should I scale on multiple platforms at once, or focus solely on my strongest? Should I try to scale as quickly as possible? How do I monetize free users? How do I get press for my app in a crowded market? Should new hires have experience scaling? How do I keep users’ credit card info private? How do I prevent DDoS attacks? How do I market to the college demographic? How do I build an effective street team? How do I get people to comment on my pins? How do I email users content they actually want? How do I get users to stay on my site longer? What percentage of my marketing budget should go towards advertising? How do I get a celebrity to talk about my product on Twitter or YouTube? How do I leverage Vine, Instagram and other short video apps to scale my products? How can I reduce the number of 1 star reviews for my app? ", "tags": "", "loc": "/content/topics/leanstartup/growth/" },

        {"title": "Growth Models", "text": "Four example growth models (there are probably more) Sticky Engine of Growth Comes from retention of existing custmers Subscription model Attrition, retention or churn rate: fraction of customers in period n who don’t renew in period n+1 New customers in period(n+1) must exceed number who dropped it Focus on either attracting more or getting the ones you have to renew Viral Engine of Growth When your growth comes when simple normal use of the product inherently leads to new signups  Viral Coefficient  - how many new customers a single customer brings in, and over what period Viral coefficient should be > 1 to get exponential growth Paid Engine of Growth When your growth depends on the simple ratio of customer acquisition cost vs. per customer earnings Simply add more money to customer acquisition and you get a predictable amount of earnings from that. LTV of a customer rells you how much you can spendn on customer acquisition. Discussion: what are examples of customer aquisition costs? Accessory Model of Growth Core product is cheap or free User is enticed somehow to buy accessories which produce revenue  Razorblade/Razer  Discussion: what are some examples of ‘accessory revenue? ", "tags": "", "loc": "/content/topics/leanstartup/growth_models/" },

        {"title": "Startup Finances from 10000 feet", "text": "Terminology Runway: How many months till there is no more money Burn (rate): How many dollars are used each month Cash: How much cash is in the bank account Financing: Where money comes from and goes to Pro Tip The Gazintas must always exceed the Gazoutas. Building the model Revenues: where do they come from? Pricing: per unit? per user? per partner? Costs: where do they come from? Cost Drivers: what variables have an effect on costs? Growth: What parameters in the model change over time Growth: What is your objective? What you can learn from the model When are you going to run out of money? What is the sensitivity to changing parameters? When will your business become sustainable? How much money should you raise? Where is your money coming from Where is it going? ", "tags": "", "loc": "/content/topics/leanstartup/highlevel_financial_view/" },

        {"title": "Hypotheses", "text": "The Lean Startup notion of hypotheses Also ‘assumptions’, but I like the term hypothesis better because it emphasizes that we don’t take a side as to whether it is true or not. We specifically want to generate evidence that will either prove or disprove it. Testable: You need to know how you would test it Explicit: You need to be able to state it succinctly (on a post-it note) Types of Hypothesis - there are lots Customer: Who is the customer? Where would you find them? Problem: What is their pain? What is the ‘job’ they are ‘hiring’ a product to do? Solution: What kind of solution are they seeking? What features do they need? Will this solution actually address their problem? Growth Hypothesis - Use will grow over time. Value Hypothesis - Like Solution Hypothesis The point is, don’t get too hung up on classifications What is important is the idea of formulating testable hypotheses, running experiments, and updating your plans accordingly. Reference:  Why do research when you can fail fast and pivot?  ", "tags": "", "loc": "/content/topics/leanstartup/hypotheses/" },

        {"title": "Testing Hypotheses -- Get Out of the Building!", "text": " You conduct experiments, right? You don’t know anything! Show and Tell as appropriate Do you need an MVP yet? What’s an MVP? Not just product questions: pricing naming problem statement technology habits ( they do … ) Some techniques Google form/survey LinkedIn groups Find out who you know and who they know Email to ask for a 20 minute phone call Think about: where do they congregate? Who are they? Find a way to observe them Target varies depending on the type of question! ", "tags": "", "loc": "/content/topics/leanstartup/hypothesis_test/" },

        {"title": "Types of hypotheses", "text": "Hypothesis examples for discussion Customer Hypothesis, examples: Young american tourists visiting europe Schoolchildren Asian business travelers in the US for the first time Have smart phone Spend less than 1 day Problem Hypotheses, examples: No professional guides available Professional guides are too expensive Can’t find someone with the point of view I am looking for Blind, so can’t read guide books Solution Hypotheses, examples: Two sided web site allowing tour leaders to find visitors Service offered to travel agents as a value added option B2B Service allowing a local agency to create a directory of tour guides Location Aware Smartphone app with peer to peer Leap of faith hypothesis: Part of your vision and hard to test If this kind of hypothesis turns out to be false then you will certainly need to pivot These are also the riskiest assumptions ", "tags": "", "loc": "/content/topics/leanstartup/hypothesis_types/" },

        {"title": "Ideas are cheap!", "text": "Ideas are cheap Everyone has a million ideas Few know how to turn the idea into a successful product or service Discussion: What is your definition of ‘successful?’ 90/10 Rule Don’t be so secretive! (Almost) always gain more from sharing your idea and getting feedback vs. keeping it secret for imagined competitive advantage If your idea is so simple that a 10 minute description is enough to allow someone else to beat you…. then your idea wasn’t really worth that much anyway! Inventor who gave his idea away ", "tags": "", "loc": "/content/topics/leanstartup/ideas_are_cheap/" },

        {"title": "Lean Startup Overview", "text": "Thoughts about Lean Startup  Lean  term stolen from  Lean Manufacturing  (Toyota et al) Some key characteristics: Small Batches vs. Large Batches Minimize WIP Changes in plan are expected and embraced  Pull  vs. Push Small self-managed teams Agile Software Development (next term :) Also based on the same principles And with the same objectives Lean Startup Yes, just another buzzword Some might say  there’s nothing new under the sun  Realize there are several ‘methodologies’ that people push The underlying principles are similar My own experience with the idea of Lean Startup Where did it come from Is it just Eric Ries self promotion? Why do I think it’s a good approach  Scientific method?  Some ideas that we’ll explore more in the next few weeks Validated Learning Build/Measure/Learn Hypotheses and assumptions Minimum Viable Product Customer Development Pivoting Lean Startup Validation Board Innovation accounting ", "tags": "", "loc": "/content/topics/leanstartup/lean_startup/" },

        {"title": "LSM Validation Board", "text": " Lean Startup Machine’s Validation Board LSM puts on weekend lean startup trainings Their Validation Board is one of many tools Let’s see how we can use it for tracking our assumptions Get one for yourself (Validation Board)(http://www.leanstartupmachine.com/validationboard/) ", "tags": "", "loc": "/content/topics/leanstartup/lsm_validation_board/" },

        {"title": "Product and Market Excercise", "text": " 10 minutes: Team up in by project (group), pick a different product Here are some products, companies and servives Barnes and Nobel Nook Tesla Motors Olin College Apple iTunes Raspberry Pi Nest Thermostat Microsoft X-Box Makerbot Replicator Google Android Pocket Hose (google it) Answer these questions (10 minutes) - what market(s) is this company and/or product in - what segment and kind of segment does it compete in - what is it's value proposition is it offering that market - how did it attack or enter the market - additional observations and/or insights? - 10 minutes total: Report out by table ", "tags": "", "loc": "/content/topics/leanstartup/market_product_excercise/" },

        {"title": "Market Segments", "text": "Market Segments Why is it important to think about them? What is a ‘market’ in this context? How do you think about the market size? Look at segments, value proposition and market entry Segments: For your market or customer hypothesis, you need to understand the market(s) and segment(s) you are serving. Notice that ‘segments’ are not black and white, they can be continuums or multi-faceted. Types of segments Various ways to classify segments. Intention is to sharpen your strategic thinking Types Mass Market: Huge and undifferentiated. Horizontal, e.g. consumers age 12 to 18. Niche: Highly specific: Vertical, e.g. Bicyclists Segmented: your product serves more than one segment. Apple serves the consumer and education market segments Diversified: your product serves very different markets: Amazon serves consumers and software developer Two or multi-sided markets: brings two or more segments together: dating services, newspapers. [story of early NeXT computer and Improv] There are others. You need to understand the market you are going for People are in the same segment when: It is not about demographics or geographics A market segment is characterized as a group of people who:  Speak the same language  (e.g. CIO vs. a hacker)  Hang out  in the same  place  (e.g. College campus vs. Facebook) They are similarly passionate or experience the pain at similar levels They expect similar distribution (e.g. web vs. retail) They expect similar levels of service (e.g. email vs. housecalls) ", "tags": "", "loc": "/content/topics/leanstartup/market_segments/" },

        {"title": "Marketing Primer", "text": " Discussion: What’s the difference between marketing and sales? Marketing: Demand creation Sales: Demand satisfaction Grossly oversimplified ", "tags": "", "loc": "/content/topics/leanstartup/marketing_sales/" },

        {"title": "Metrics", "text": " You can’t manage what you don’t measure. What gets measured gets managed Discussion: What is a metric? Examples? Useful Metrics are Actionable: You can use them to figure out what to do, or what you did, to cause the change. Need to know what to do to get more of that result Transparent: Publish metrics to the team Accessible: Make the definition of what’s being measured clear. No made up words or jargon. Auditable: Make it easy to see the underlying raw data But, beware of ‘vanity metrics!’ More users today than yesterday? Not enough. How do I change it. What changes will affect what metrics? You can make changes, but will they matter to customers? Discussion: How do you decide what metrics matter? ", "tags": "", "loc": "/content/topics/leanstartup/metrics_intro/" },

        {"title": "Minimum Viable Product", "text": "The MVP or Minimum Viable Product  It’s not necessarily minimal nor a product nor viable!  MVP is not a perfectly descriptive term  An experiment is a product  (From TLS book) Smallest increment of work that will test a hypothesis What forms can it take? A static web site A video A simple free wordpress blog Pricing scheme Concierge MVP Problem description Solution description Paper mockup Actual Prototype The key is that it is MINIUM! MVP is always always related to a hypothesis (or more than one) Discussion: Does MVP mean that quality is not important? ", "tags": "", "loc": "/content/topics/leanstartup/mvp/" },

        {"title": "Naming", "text": "Naming Caution: naming can be the biggest timesync Caution: Keep your life simple and choose the same name for your product and company Tip: Initially pick a dumb codename ( Project Alpha ) that has no meaning and you know you are not going to keep At the start you don’t know yet what your product is so you really can’t pick the real right name yet, anyway. Tip: For $0 get bit.ly/project_alpha (etc). Easy to say and remember. Gives you a shortened URL to your product. Tip: For $10 get some domain name that’s available even if you know it’s not your real final name. Your goal: have a domain name that is easy for you and your listener to remember and to share over the phone. System X or Brandeis 007 are just as good as anything. ##### Handy Tools Wordoid ", "tags": "", "loc": "/content/topics/leanstartup/naming/" },

        {"title": "Measure the effect of a pivot", "text": " Identify the key ‘stages’ that users experience on site Example: create account log into account add content invite friend Discussion: What would stages be for our product? These are not arbitrary!! they figure directly into your eventual business model depending on your goals and your stage they will be different How many people responded to your email answered your survey answered a question asked a question etc. This becomes a classic  funnel  (sales, marketing etc.) Discussion: why do you think we call it a funnel? Metrics… Metrics… Metrics You also need a way to measure how many people make it to each step Without metrics your pivots are a shot in the dark Once you have a baseline Do the pivot Quickly determine if you improved where you expected to improved ", "tags": "", "loc": "/content/topics/leanstartup/pivot_measurement/" },

        {"title": "Types of Pivots", "text": " Why do we do a pivot? What are the signs that one should be contemplated? When is it a pivot vs. a simple change to try to respond to feedback? When it’s a change to a ‘core assumption’ ? When it’s a change to a ‘article of faith’ assumption? Depending on the reason of the pivot, you will consider ways in which to change plans Categories of Pivot Zoom in pivot - Subset of product is what matters Zoom out pivot - Product is too narrow - generalize it Customer Segment pivot - Product solves a real problem, but there’s a different market that needs it more Customer need pivot - Market we are looking at has very strong needs, but the problem we are solving is not the biggest need Platform pivot - Go from point product to a platform or vice versa Technology pivot - Change core technology Channel pivot - Change how you get the product to the customer, or change from a product to a service Value Capture pivot - A basic change in the business model or how the business is financed. Discussion: Describe each one and give an example. Are these all the kinds that exist? Illustration ", "tags": "", "loc": "/content/topics/leanstartup/pivot_types/" },

        {"title": "Positioning", "text": "Positioning A very brief statement that summarizes the way you want people to think about your product or service especially as compared to similar or other products Lots and lots of sample positionings: Beta List Product Hunt Tips for Positioning Meant to clearly answer a series of key strategy questions In a consise form, for internal use Not for selling. For communicating and maintaining alignment Try and be precise and clear Sometimes you have 2 seconds or 2 words! ", "tags": "", "loc": "/content/topics/leanstartup/positioning/" },

        {"title": "Quantitative and Qualitative Testing", "text": "  Prove  or  Disprove  a customer, problem or solution hypothesis Hypothesis should be well stated! It should be  falsifiable  Key Techniques Online Survey Person to person conversations Mailing lists, facebook friends, etc. Build a Landing Page A/B Testing Online Survey Designing a good online survey Don’t flood university community with surveys, especially non-students How many questions? Who do you send it to? How many responses would be considered good? Person to Person interview Make sure they know this is part of a course Make sure they know you care and this is important to you Be very respectful of outsiders’ time. 30 minutes. Always offer to come to them or make a phone call Stick to the time Be grateful and offer to return a favor Give them my name and email in case they have any questions Pito illustrates in Role playing Role playing in pairs Landing Page What is a Landing Page? How do you create one? Tools for building and measuring Example is Unbounce See Lots of examples on Unbounce A/B Testing Also known as  split testing  Divide your targets into two (or more sets) Show each of them an alternative version Works best with a feature description, a marketing message, a price and so on. Discussion: For each product team, what are some things that you could test using A/B? Exactly how would you go about it? ", "tags": "", "loc": "/content/topics/leanstartup/quant_testing/" },

        {"title": "Sustainable Growth", "text": "Discussion: Under what circumstances do we say that we have sustainable growth? Excludes one-time campaigns and actions Systematic: built into the product’s usage Comes from actions of past and existing users or customers There are many ways in which using a product can drive revenue Word Of Mouth (people recommend your product to others) Side Effect of Usage (people see you using and want to use it too. Or in order to benefit you have to invite.) In-product purchases (part of the experience of the product requires you to spend money inside it.) Subscription (or need to re-buy) (access charges, periodicals, expiration or consumption.) Funded advertising (When advertising gets more users, and is funded from revenue from users.) Discussion: More ways? Think of all the products you know and use! ", "tags": "", "loc": "/content/topics/leanstartup/sustainable_growth/" },

        {"title": "Tuning the Engine of Growth", "text": "Tuning the Engine of growth What is an engine of growth? It’s A metaphor and a financial model Approach Identify key stages of relationship with customer Measure customers at each stage Analyze impact on financial model Tune the engine Key stages Key stages…You don’t want all of these: Visit: users come to the site from various channels Repeat: come back to the site because they liked it. Register: request a log in or register to become a user Activate: actually activate their account (respond to an email) Retain: come back at lease X times and use the site repeatedly Refer: they refer their friends within X days Pay: Actually send you money within X days Abandon: Don’t log in aagain after X days Cancel: Actually cancel their account Measure Which stage can you actually measure in your product or service? Be very precise about the ones you decide to measure You can’t/shouldn’t measure all of them The ones that matter to you are the ones that tie in with your engine of growth Model How do you plan to make money or achieve your objectives? Remember the different types of engines of growth Stickey Engine of Growth (subscription) Viral (users invite other users) Paid (simple purchase, one shot) Accessory (in product purchases) Tune: Make changes, see the impact Now that you know what you’re optimizing for And you have a wy to see before and after You can experiment and tune your engine Let’s work through a detailed example! Download and take a look at this simple financial model spreadsheet. ", "tags": "", "loc": "/content/topics/leanstartup/tuning_engine_of_growth/" },

        {"title": "Value Proposition", "text": "Value Proposition Statement Example 1:  For tourists visiting a new destination, who want to supplement their experience with local knowledge, NewProd offers local and knowledgable audio guides automatically based on location  Example 2:  For local professional and non-professional guides, Newprod is a way for them to discover new paying customers by providing location based audio tour segments which produce leads and also bolster reputation.  Example 3:  To new residents of Boston, Breadcrumbs is a new kind of recommendation app that provides a focused, quick and entertaining recommendation for a destination of discovery and entertainment, because unlike Yelp and Facebook and similar sites, Breadcrumbs presents truly unique insider recommendations in a fun and focused smartphone app.  TEMPLATE For [WHO], who [PROBLEM], [SOLUTION NAME], will [DO-THIS-JOB] by [IN THIS WAY] The sentence specifically answers some key questions: WHO: Who is it for? How would you characterize them? PROBLEM: What is their problem, what is the job their looking to hire a product for? What is their pain? SOLUTION NAME: What is the proposed solution? Your product name goes here. IN THIS WAY: How does it achieve that? A very brief description of the salient characteristics of what your product or service does. Notice that this is an ‘internal’ statement, never meant to be shown to customers or even investors. ", "tags": "", "loc": "/content/topics/leanstartup/value_proposition/" },

        {"title": "Assignment Scoring", "text": "Assignments are scored (not graded) on a 10 point scale, as follows: 10-8: Really excellent submissions. Correct and complete. Brings in outside sources or experiences. Well written and thoughtful. 7-5: Workmanlike submission. Meets expecations. Responds to the assignment in a reasonable way. 4,3,2,1: Disappointing submission. Incomplete. Misunderstanding at a basic level. Casual. Badly worded. Doesn’t look like any effort went into it. 0: Didn’t hand in work If you need to map it to a letter grade, it might look like this: 10 - A+ 9 - A 8 - A- 7 - B+ 6 - B 5 - B- 4 - 3,2,1 0 - incomplete ", "tags": "", "loc": "/content/topics/logistics/scores/" },

        {"title": "PA 1 - Programming Assignment 1", "text": "Social networking-based webapps often collect a huge amount of information about the members of the community. One of the most exciting developments in the past decade has been the development of tools for analyzing this data to provide value for the community. For this assignment, you are to write a ruby program that reads in a large data set and produces some analysis. Data The data set, ml-100k, consists of 100,000 ratings of 1682 movies from 943 users and can be downloaded from one of these places: * http://www.grouplens.org * http://dennett.cs-i.brandeis.edu/talks/ml-100k.zip The main data set u.data consists of 100,000 rows where each row has 4 tab-separated items: * user_id * movie_id * rating * timestamp More information about the users and movies can be found in other files, but you don’t need that info for this assignment. Programn You should write a program movie_data.rb containing a class MovieData with the following methods load_data - this will read in the data from the original ml-100k files and stores them in whichever way it needs to be stored popularity(movie_id) - this will return a number that indicates the popularity (higher numbers are more popular). You should be prepared to explain the reasoning behind your definition of popularity popularity_list - this will generate a list of all movie_id’s ordered by decreasing popularity similarity(user1,user2) - this will generate a number which indicates the similarity in movie preference between user1 and user2 (where higher numbers indicate greater similarity) most_similar(u) - this return a list of users whose tastes are most similar to the tastes of user u Questions to think about (be prepared to discuss them …) Describe an algorithm to predict the ranking that a user U would give to a movie M assuming the user hasn’t already ranked the movie in the dataset. Does your algorithms scale? What factors determine the execution time of your  most_similar  and  popularity_list  algorithms. Deliverable Deliverable: upload a repo to your github account containing the movie_data.rb source code a transcript of running your code and generating the first and last ten elements of popularity list and most_similar(1) Deliverable: a screenrecording showing you running the script in movie_data.rb ", "tags": "", "loc": "/content/topics/pa/pa1/" },

        {"title": "PA2 - Programming Assignment 2", "text": "You are to extend your PA 1 - Programming Assignment 1 to include a prediction method that will predict the rating a user would give to a movie and you are to run some tests to determine how accurate your method is. Note: After using this a few times, I think there are slightly better ways to organize the classes. You are welcome to either follow these instructions exactly or to come up with a 'better' design. You should implement two classes: MovieData and MovieTest with the following specifications: MovieData has a constructor that takes a path to the folder containing the movie data (ml-100k for example) a second optional constructor can be used to specify that a particular base/training set pair should be read. For example, 1 z = MovieData.new( ml-100k ) will read it all of the data in the 100,000 lines in  u.data  as the training set and will have an empty test set, while 1 z = MovieData.new('ml-100k',:u1) will read in the 80,000 lines in  u1.base  as the training set and the 20,000 lines in  u1.test  as the test set. MovieData also has several instance methods z.rating(u,m) returns the rating that user u gave movie m in the training set, and 0 if user u did not rate movie m z.predict(u,m) returns a floating point number between 1.0 and 5.0 as an estimate of what user u would rate movie m z.movies(u) returns the array of movies that user u has watched z.viewers(m) returns the array of users that have seen movie m z.run_test(k) runs the z.predict method on the first k ratings in the test set and returns a MovieTest object containing the results. The parameter k is optional and if omitted, all of the tests will be run. MovieTest is generated by the z.run_test(k) and it stores a list of all of the results, where each result is a tuple containing the user, movie, rating, and the predicted rating. The MovieTest object also has several instance methods: t.mean returns the average predication error (which should be close to zero) t.stddev returns the standard deviation of the error t.rms returns the root mean square error of the prediction t.to_a returns an array of the predictions in the form [u,m,r,p]. You can also generate other types of error measures if you want, but we will rely mostly on the root mean square error. You should write comments for each of the methods of your two classes and use Rdoc to generate HTML documentation for the two classes. Put the documentation folder and the two classes in a folder called PA2, and upload PA2 to github. What to hand in. Deliverable: A blog post with the following components The Algorithm. A description of your prediction algorithm and what you think are its advantages and drawbacks. The Analysis. A description of the result of running some experiments to determine the accuracy of your method (using the z.run_test(k) method and the MovieTest methods. Benchmarking. An estimate of the time it takes run each prediction (determined by using Time.now to capture the current clock time before and after making k predictions) and an explanation of what you think will happen to that time if you increase the size of the training set by a factor of 10 or 100…. Connection to your Incubator Project. A description of the kind of data your webapp could collect and the kinds of predictions it could make (if you wanted to do so….) Also please update this spreadsheet with the result of your test: PA2 Results metrics summary Deliverable: Comments on at least two (was four) of your fellow student’s blog posts. Deliverable: The code for your classes in movie_data.rb and movie_test.rb uploaded to github in a folder called PA2 Deliverable: A short screen recording showing you using irb to load the ml-100k folder into MovieData, run some tests of the instance methods, generate a MovieTest data with 10 rows from the testing set, and running the instance methods of the MovieTest object. * *NB: It’s fine to just run a ruby program from the comamnd line but make sure the output is understandable and explain what you are doing! Deliverable: A link of the result of submitting your code to code climate Important: This will take a few hours but don’t spend too much time trying to get a super accurate prediction algorithm. There are several published papers on this subject and the goal here is just to give you some practice writing useful Ruby code and the let you think about big data for your own applications…. If you want to create a really good prediction algorithm. First complete this PA2 with a really simple predictor and get everything done. Then go back and refine the algorithm, but only if you don’t have more important projects to work on! This is a really fun kind of project to work on, especially once you start getting the hang of writing ruby code to implement sophisticated algorithms. We’ll discuss some very simple algorithms in class… ", "tags": "", "loc": "/content/topics/pa/pa2/" },

        {"title": "PA2 - Programming Assignment 2", "text": "You are to extend your PA 1 - Programming Assignment 1 to include a prediction method that will predict the rating a user would give to a movie and you are to run some tests to determine how accurate your method is. Note: After using this a few times, I think there are slightly better ways to organize the classes. You are welcome to either follow these instructions exactly or to come up with a 'better' design. You should implement two classes: MovieData and MovieTest with the following specifications: MovieData has a constructor that takes a path to the folder containing the movie data (ml-100k for example) a second optional constructor can be used to specify that a particular base/training set pair should be read. For example, 1 z = MovieData.new( ml-100k ) will read it all of the data in the 100,000 lines in  u.data  as the training set and will have an empty test set, while 1 z = MovieData.new('ml-100k',:u1) will read in the 80,000 lines in  u1.base  as the training set and the 20,000 lines in  u1.test  as the test set. MovieData also has several instance methods z.rating(u,m) returns the rating that user u gave movie m in the training set, and 0 if user u did not rate movie m z.predict(u,m) returns a floating point number between 1.0 and 5.0 as an estimate of what user u would rate movie m z.movies(u) returns the array of movies that user u has watched z.viewers(m) returns the array of users that have seen movie m z.run_test(k) runs the z.predict method on the first k ratings in the test set and returns a MovieTest object containing the results. The parameter k is optional and if omitted, all of the tests will be run. MovieTest is generated by the z.run_test(k) and it stores a list of all of the results, where each result is a tuple containing the user, movie, rating, and the predicted rating. The MovieTest object also has several instance methods: t.mean returns the average predication error (which should be close to zero) t.stddev returns the standard deviation of the error t.rms returns the root mean square error of the prediction t.to_a returns an array of the predictions in the form [u,m,r,p]. You can also generate other types of error measures if you want, but we will rely mostly on the root mean square error. You should write comments for each of the methods of your two classes and use Rdoc to generate HTML documentation for the two classes. Put the documentation folder and the two classes in a folder called PA2, and upload PA2 to github. What to hand in. Deliverable: A blog post with the following components The Algorithm. A description of your prediction algorithm and what you think are its advantages and drawbacks. The Analysis. A description of the result of running some experiments to determine the accuracy of your method (using the z.run_test(k) method and the MovieTest methods. Benchmarking. An estimate of the time it takes run each prediction (determined by using Time.now to capture the current clock time before and after making k predictions) and an explanation of what you think will happen to that time if you increase the size of the training set by a factor of 10 or 100…. Connection to your Incubator Project. A description of the kind of data your webapp could collect and the kinds of predictions it could make (if you wanted to do so….) Also please update this spreadsheet with the result of your test: PA2 Results metrics summary Deliverable: Comments on at least two (was four) of your fellow student’s blog posts. Deliverable: The code for your classes in movie_data.rb and movie_test.rb uploaded to github in a folder called PA2 Deliverable: A short screen recording showing you using irb to load the ml-100k folder into MovieData, run some tests of the instance methods, generate a MovieTest data with 10 rows from the testing set, and running the instance methods of the MovieTest object. * *NB: It’s fine to just run a ruby program from the comamnd line but make sure the output is understandable and explain what you are doing! Deliverable: A link of the result of submitting your code to code climate Important: This will take a few hours but don’t spend too much time trying to get a super accurate prediction algorithm. There are several published papers on this subject and the goal here is just to give you some practice writing useful Ruby code and the let you think about big data for your own applications…. If you want to create a really good prediction algorithm. First complete this PA2 with a really simple predictor and get everything done. Then go back and refine the algorithm, but only if you don’t have more important projects to work on! This is a really fun kind of project to work on, especially once you start getting the hang of writing ruby code to implement sophisticated algorithms. We’ll discuss some very simple algorithms in class… ", "tags": "", "loc": "/content/topics/pa/pa3/" },

        {"title": "FAQ for Pito Salas", "text": "Mutual Respect Here are some things about me as a teacher that might be interesting and useful for you to know. I think it might make it easier to understand how I respond and why I say some of the things I say. I care a lot about teaching. It’s an art that I am still mastering and am very committed to. I put a lot of work into organizing a course, preparing for an individual class, and working with students. I feel proud and successful when students tell me that a course or class or experience was valuable for them in their own lives or carreers. I care a lot about-follow up. If I say I will do something and I don’t do it, I feel bad. I expect the same from you. If I make a specific request in person or email, I expect a response. Even if the response is that you can’t meet the request. Leaving me hanging is not good, I will remember and grumpily ask for it again. I care a lot about maturity and ‘professionalism.’ I work hard (really) at this and I expect you to do the same. We treat each other with respect not because I am the teacher and you are the student, but because we value the effort that each other is bringing to the experience. No one is forcing either of us to be here. I am very available to you. Maybe more than you realize. My email is pitosalas@gmail.com and you will get a response very quickly. You also have my personal cell phone number. If you are ever unsure about anything, please ask: in person, or over email. I hope no one is ever nervous or unhappy because they don’t feel they understand what is going on, what is expected from them or some material. There are a lot of ways that I can help you. Please take advantage of them. I can help you understand stuff, decide what matters to learn, how to plan your work, I know a lot of people in a lot of disciplines who want to help students like you. Don’t miss the opportunity. If something in this doesn’t make sense to you or sounds odd, please let’s talk about it! ", "tags": "", "loc": "/content/topics/personal/pitofaq/" },

        {"title": "Choosing a project to work on", "text": " Be hard-nosed! Don’t go for what looks fun and cool ONLY Challenge yourself and your teammates Do a little research using your common sense! Can you find other similar products, competitors, or related products, and is this a good or bad thing? Look in Kickstarter and RocketHub. Are there any related projects? Do you believe that you could actually get enough funding through Kickstarter or RocketHub to build a prototype? What would the Sharktank say of it? How big a real problem is this really solving? For who, and do you think those people would be willing to pay for it? How would you get it to them? What kind of price do you think they would be willing to pay? Are you pretty sure this can be productized (that is, not can we make a single one by hand, but can we make a lot of them?) ", "tags": "", "loc": "/content/topics/projects/choose_product/" },

        {"title": "Term Project Final Deliverables", "text": "Summary [DRAFT] This is a team, multi-part deliverable. You should start looking at this at the start of the Term Project part of the course so you know what you are working towards. Don’t be scared by all the words below, I am just trying to be clear and detailed. Questions are welcome! Remember, 9 out of 10 startups fail. It is not expected that each project yields something that merits investment. The important things are the journey, the process, and what you learned that will help you be a better entrepreneur. Final Presentation Day On Monday December 15,1:30PM - 4:30PM we will have final presentations. Several Product Reviewers (tm) will be invited to listen to each team do their presentations, ask questions, and have one on one conversations while we munch on snacks and drink delicious beverages. The PRs will ask to review the projects as if they were looking for angel funding. The review will not be based solely on the formal presentation but also from looking at additional materials that you might have (see below.) So not all the criteria need to be packed into the presentation. Some can be in the form of handouts or a poster or a demo on your computer. They will be given a form to fill out with their numeric feedback and additional comments. The experts feedback will be factored into your eventual grade. What we will be looking at Here are some of the criteria that we will be looking at. NB: not all these topics have to be covered in the presentation, they might be relegated to the handout. the idea itself, with an elevator pitch and positioning/value prop how well you understanding the market and the customer summary of top hypotheses that were tested and the results thereof how much you learned by getting outside the building how well you have addressed the biggest and riskiest hypotheses your thinking about the pricing and business model your thinking about the feature set (stories) your thinking about the user experience (paper prototype, ux flow, mockups, etc.) your thinking about the feature set/stories for the product and the technical architecture your ability to deliver the product if it were funded You should consider using the Business Model Canvas structure as the outline of either your presentation or your handout or both. This is just a suggestion. Here it is: Business Model Canvas Specific Deliverables An 8 minute presentation. Will be delivered by all the students on a team. The presentation needs to be rehearsed and fit to the time constraint. Questions will be held to the end, and will go for up to 8 minutes. You can think of the audience as angel investors. Slides for the presentation. These should be submitted for grading also printed out to be handed out to the guests. Handout/Paper/Report with additional information (5-10 pages.) You could consider following the same organization as your presentation, but with more detail. For example larger screenshots or a more complete list of stories. You can assume that whoever reads it also has the presentation slides. You can think of the audience for this piece to also be angel investors. You should submit it for grading. Ad or Brochure or Flyer for your product (1 page. 2-sided if you want. Color. Pretty.) These should be submitted for grading and also printed out to hand out to the guests. This is pure marketing. How do you want to convince your customer to adopt your product? If your product has two distinct customes, e.g. University Admin and Students, then it’s ok to have two Ads if you feel you need it. Finally One the last day of class, all 7 teams should have a alpha-version of their presentation and handouts. We will look them over and provide feedback. Also there will be food. ", "tags": "", "loc": "/content/topics/projects/final_deliverables/" },

        {"title": "Term Project Report", "text": " N.B. Please maintain your term project’s version of this document. You may tweak it at any time and even reorganize it. Just make sure that you cover every point of the outline in your document. Make sure that if you printed it out and gave it to someone who had never seen it before it reads and looks clean and professional. Pro Tip This is not a form to be filled out. Truly excellent Project Documents often will diverge from this Introduction Product and Team name: which can be anything you want. Sometimes people just pick a code name like Team Alpha, and sometimes a descriptive name like Team Affective Tutor. You can always change it later. Team Members Summary Tweet length summary of project (140 characters) Product Summary (1-3 paragraphs) Value Proposition Designer Canvas Customer Jobs Customer Pains Customer Gains Products and services Pain Relievers Gain Creators Elevator pitch and value proposition Elevator Pitch as you might use for a non-technical business savvy person, for example a senior member of Brandeis administration (see: Elevator Pitch) Value proposition statement, using a ‘sentence template’ like we used in class Tracking ", "tags": "", "loc": "/content/topics/projects/final_report/" },

        {"title": "Frame 1 Report", "text": "Report 2-5 pages, including diagrams, photos, graphs or whatever Based on work done so far in Frame 1 and looking forward Format could be a word document, a pdf (or even a one page web site, but that would be unusual) How to write an excellent report This report will be read as a unit, without refrence to previous drafts It should have a logical flow of an argument with an introduction and a conclusion Give consideration to visual appearance of the report, it should look professional By now your team should have really solidified around your product’s vision Try to have as much substance as you can based on outside research, meetings, references etc. Show that you’ve ‘done your homework’ See suggested topics below, which is not meant as an outline just stuff to jar your memory Suggested Contents Checklist Name: Product or codename Team members: names and emails Visuals: Any mockup or diagram or flow chart to illustrate the product One liner: Tweet Length summary of the product Vision: A concept for an exciting and impactful product or service with team alignment on exactly what the product is (this is harder than you think!) Can be 2-3 paragraphs. Elevator Pitch: Elevator Pitch) for your product (with validation if possible) Value Proposition: Based on the Value Proposition Canvas. Hypotheses: What type of hypothesis? (customer, problem, etc.) Any leap of faith? Which ones did you validate and which ones failed? By what evidence? Getting out of the building: Design and results out of the building ‘experiments’ to test hypotheses with multiple proven or disproven. What tools and techniques did you use, what were the results? Which ones would you still like to validate? What dead ends did you pursue? Analysis: And preliminary conclusions based on validated learning so far. Strategy going forward: Immediate next steps; identified risks and ways of addressing them; reasons to believe this will be a fundable product going although further pivots will be needed; Conclusions ", "tags": "", "loc": "/content/topics/projects/frame_1_report/" },

        {"title": "Frame 2 Report", "text": "Report 4-10 pages, including diagrams, photos, graphs or whatever Incorporates all the content of the Frame 1 Report, revised as much as you require Format is PDF How to write an excellent report Flow. This report will be read as a unit, without reference to previous drafts. It should have a logical flow of an argument with an introduction and a conclusion. Try to think bigger. You will need to make a case that the product will be a viable business. Be Serious.Your work is evaluated not just on whether you follow the steps or the format but based on whether you are being realistic and intellectually honest about your proposal. Would you actually pitch this to an Angel? Get Out. Everyone needs to get out of the building more. Go beyond your friends. Talk to strangers! Professionalism.* Give consideration to visual appearance of the report, it should look professional Substance Try to have as much substance as you can based on outside research, meetings, references etc. Show that you’ve ‘done your homework’ Suggested Contents Content of Frame 1 report is incorporated, revised and edited as much as required A visual mockup or good paper prototype to use in further experiments and as input to the design. It should include all the important screens and give the reader a sense of the product. A diagram showing the flow of screen to screen in the user interface and explanation thereof. An architectural diagram of the product, site, app or service. An idea of how it could be built. Major technological risks are called out Preliminary technical architecture: Database schema (Domain Model) makes sense and is explained well Tables, fields, joins and so on are worked out Some thinking about communications and where the data is stored Overall system architecture - what are the major components Some sense of how the overall product will be built List of stories. Don’t just show a big list. You need to organize them into sets of related functionality, sometimes called  epics , for the purposes of presentation. For example:  Core Proximity Functionality (4 Stories)  or  Abilities to define ad-hoc survey for real time feedback (5 stories)  or  Visualize and change users visibility to other users (5 stories)  or  Animal shelter registration and profile updating (3 stories) . Strategy going forward: Immediate next steps; identified risks and ways of addressing them; reasons to believe this will be a fundable product going although further pivots will be needed ", "tags": "", "loc": "/content/topics/projects/frame_2_report/" },

        {"title": "Pilot Project (P2P Tours)", "text": "For the first 4 weeks of the course we will focused on the  Lean Startup  approach to validating a vision for a project, pivoting as necessary to achieve a product-market fit. We will divide students into groups of 5 or so, and each group will work independently to use the process on the vision for a product called  P2PTours  This vision is purposely vague and allows many different implementations and instantiations. P2PTours - Peer to Peer Tours  Our vision is that using just a cellphone, travelers can now get access to a huge and wonderful collection of local tours, recorded by local experts, for free or for a nominal fee. Imagine: you walk into St. Peter’s Square and choose which local expert you want to listen to: a historian? A priest? An architect? A chef? Each one will have their unique perspective and will enhance your visit in their own unique way! Process Class is divided into 5-student teams. You are a study group. You will work together to understand the ideas of Lean Startup and apply them to the Pilot Project. During the first 4 weeks we will rapidly cover the Lean Startup approach and concepts. In that time you will read about half the book. I recommend that each pilot team arrange to meet at least 1-2 hours per week outside of class as a study group to learn from each other and work on group homeworks. The pilot project will end with a class when each of the teams present their deliverables for the pilot project. Team Deliverables A report/discussion of 2-4 pages covering the elements of the lean startup process including: Elevator pitch for the product (see: Elevator Pitch) Vision (revised): Describe your product or service, in one tweet and then in a paragraph or two. Hypotheses: What type of hypothesis? (customer, problem, etc.) Any leap of faith? Which ones did you validate and which ones failed? By what evidence? Getting out of the building: What tools and techniques did you use, what were the results? Which ones would you still like to validate? What dead ends did you pursue? MVP: What MVP(s) did you create or would you create. How did you or would you use it to validate the hypotheses? Engine of Growth: What are some of the ways in which this can grow? Which of the types of engine of growth do you think would work Pivots: What pivots do you anticipate and why? How would you handle them? Conclusions: Do you think this product would work? Could it make money? Would you invest in it? Reflect on the experience: How did your team operate? How well did the LS work for you? ", "tags": "", "loc": "/content/topics/projects/pilot_project/" },

        {"title": "Product ideas", "text": "Best ideas 11 Questions: Like 10Q but focused on college students. Once each year, on Oct 1 (or any other arbitrary date), subscribers get asked 11 Questions relevant to their future plans and college careers. They have 11 Days to answer after which their answers go into a vault. They can’t edit or look at them again. Until 12 months later. They see their answers to see how things really turned out. And they get the same 10 Questions again. It’s playing with time and time travel and looking back and into the future. Yelp for Online courses and Moocs This problem is just being noticed. If I want to take an online course on some topic, say  How to fix a car  or  Econometrics  I might find two, 3 or even 10 offerings from different teachers and institutions. How do I know which one to take? Cryptocurrency Visualizer: An educational or research tool that creates a visualization of how cryptocurrencies in general or bitcoin in particular, work. Showing all the network nodes, simulated users and miners, an animation of all this, including the public ledger. Could serve many purposes, starting with teaching. IMDB for Books: A service just like IMDB but for books: titles, genres, authors, publishers, lists of reviews, etc. This would be a very cut and dry  databasy  application that organizes information about books in a factual way. It would not contain reviews or any other subjective information, but if anything, point to it. RegisterBot: Alert me when a course that I want to take is open for registration. Uses the Universities data access API to efficiently monitor and then alert user about course availability. Generalize to other situations when you want to know as soon as something becomes available. Personal Training Service via Skype: Delivers how-to videos and excercises, a platform for trainers and phys ed teachers and physical therapists to offer their services via skype. ExcuseMe (mobile app for people in a gathering to allow the participants to react to what is being presented). Related to Classroom clicker, but much simpler. Yelp for Courses: Crowdsource student ratings of courses. In the simplest example, simply let me list my 3 favorite courses. Or perhaps rate courses that I’ve taken. And then help another student discover great courses in other departments perhaps that they never knew existed. Generalize to help me pick my favorite beer, or my favorite tv show. Instead of ratings, keep it very simple: each user picks their top 3. Generalize further by tying in availability of the course, or whether it counts for your major, or whether it is offered when you need it. Rember My Name: Use Spaced Repitition to quickly memorize names and faces. This application takes as input a set of snapshots of faces plus the name of the person and it generates a ‘game’ that helps the user quickly memorize names and faces. Good for business people going to an important meeting or (!) professors teaching a new class. You could make the input of the names and faces clever and efficient by intelligently crawing a photo album page like is generated by Latte. FoodFlix: A service for for restaurants to get professional photos and videos for their establishments in say Tripadvisor or Yelp. The premise is that great images greatly improve the results of listings on sites like Tripadvisor, yet most restaurants don’t know that, don’t care, don’t have the wherewithal or assume that getting good photos is expensive. The concepts would be that the business is around designing and optimizing a real-world process for cheaply making and posting these photos and videos. It also tests and optimizes the style, titling, length, etc of photos and videos for maximum effectiveness for the chosen purpose. FinancialBot: Approachable way to create stock selection agents which watch for certain patterns in prices and market conditions and do things, most likely send an email. For example:  Alert: Stock INTL price is within 10% of 12 month low.  Allow a normal person to do program trading in a safe way. Possible to have some domain specific language, or an iTunes Smart Playlist kind of user interface to create agents that ‘run in the cloud’ and send emails, or some day actually perform trades. BarTalk: A short-distance walkie-talkie for use inside a noisy bar. We can talk to each other right across the room. There are many other applications. It’s clearly just a fun toy but it could be very cool. A software-only solution that might work goes as follows: Using a pair of smartphones and bluetooth headsets, the two phones could use low-power bluetooth to transmit voice between the two. If that approach can be made to work technically, then the further details of the user interface are quite soluble. Giving Portfolio: This app uses publicly available charity ratings databases to design a customized, personal portfolio of giving based on broad categories of causes, funds to be donated, and a time schedule. With this app the donor orders a customized report recommending varying donations to causes over time. For example, I want to support charities with less than 12% overhead, that focus internationally on education and homelessness, and I want to donate $1000 every quarter. This tool will send me an email every three months with specific and up to date recommendations. Genius Online: Inspired by an Amazon announcement today: Amazon Mayday. This idea is to provide the same kind of  Apple Genius  live support to Mac and Windows users. They pay a subscription fee or a per incident fee and get live video assistance for their basic computer problems. I do this for my mother all the time. And by the way, if someone calls AppleCare to get help, the incident cost is pretty high. This could by concierge-tested very easily. SpeedSpy: A distributed way to address speeding or unsafe driving on public transportation. Running this app simply captures the location and speed of the vehicle. The app knows the official speed limits for busses, trains, trolleys and captures apparent violations. This data is collated on the server to be used for flagging dangerous drivers, or times of day, or parts of a route. Internal Social Network: Professor Ben Gomes Casseres is interested in a tool optimized for groups or organizations of 100-1000 people or so. Create a secure internal social network that mimics the best of Facebook, Twitter, Tumbler, Reddit, Wordpress and other social media platforms. But this one should be focused on forums, topics, events, resources, and images of interest to the group. Ideally, cloud based and accessible from all devices. One use, for example, would be for internal communication inside Brandeis or a specific program here. But it will compete with open networks that students also use. So, ideally, it is linked to these open networks, filters relevant info from them, or something like that. The business model would probably involve the organization or group leader buying the product, managing access, and doing some monitoring. There are some products on the market that may approximate this, but it is not clear how good they are (e.g. Ning). Corporations often have such internal networks, but they worry more about security than organizations such as universities – for corporate use, a cloud solution is less likely for them. Curriculous: A teaching and learning tool to allow a teacher to easily create a course web site, including curriculum, lectures, course notes etc. Based on the product with which I made this site. Future would allow each lecture to have a video assoicated with it, allow students to hand in homeworks directly on the site, automatically convert the curriculum into a powerpoint or pdf and many other cool things. Tweeting Trees: Chris Osgood of City of Boston says: Drought and high heat are two of the major summer stresses for our street trees, and we don’t have the ability to water every tree in the summer when they need it. To encourage residents to help out – to adopt-a-tree – we thought it would be compelling if adopted trees could tweet @ their adopter when thirsty (a.k.a. low moisture levels.)We’ve been looking for a partner who can build something for us to pilot this with.  Lean Startup Growth Engine: Educational  game/simulator . A teaching and learning tool. Choose stragegies, set prices, design the product, burn money, earn money, analyze results over time, pivot and either get off the runway or crash. FlowPlanner: General visual discrete simulations. Professional software product, useful in all kinds of strategic decision making. Visually lay out a ‘network’ with ‘products’ and ‘customers’ flowing through, queueing up, being processed, developing bottlenecks and traffic jams. LiveClassroom: A teaching and learning tool allowing instant feedback from an audience or classroom regarding a lecture or meeting or event. Members get an email notification that looks like a survey asking about today’s lecture or class. The results of these probes are available as beautiful visualizations which help track the effectiveness and retention and motivation of the audience. Classroom  clicker  app for smart phone: Create quick surveys and tests, on-the-fly and allow folks in the audience to use their smartphones as a cicker. Grabbag from previous courses Online book club Open Source OnStar Mobile flashmob generator Skillshare - I have this skill Pandora-style Upcoming concerts Find recycling + haz. waste disposal location Aquarium Game Roommate Helper. Site to help roommates survive with each other. One Sentence Definition Computer ‘self destruct’ Create groups quickly, many groups, location based? PenPal Finder I am Qualified Face Recognition - mobile camera Coupon Search Scan social network for pictures of yourself Paths on campus (optimal paths) Lend Me A Fiver Fan-kit - make your own fan site Chore Tracker -  Honey, do…  (possible name: Honeydew)  Ask the Incubator  - or connect builders to requestors Music Composition - auto-transcribe PortableFakeBook Just the chord changes (legal stuff) - and pick the key (auto-transpose) … Vocal note entry ( Ab quarter note ) Don’t wake me up - time zone checker Brandeis Mobile Photo Productivity: where are you, how much is done, movement, plant dying showing Stop me from texting while driving ConcertFinder Social Filtering of courses Physical Disability Google Maps - pathfinder Mobile Language learning games Mobile tip calculator Collaborative Math Research platform Tycoon (City Business game) Mission Impossible (people send out missions to other people) College Thief (stealing to pay your way through college. Tagline: Books, Dorms, and a Crowbar) Modern Protest/Dynamic Democracy (real-world ‘dislike/like’) Avoid Queue (general reservation system for restaurants/replacing table waiting devices/order and pickup) MyCatalogue/VirtualButler (everything I own, library of everything you own) Batman-R-Us (I need help) Pandora Shopping (look at different types of shoes, find similar shoes) Happy/Sad (maybe prompting you, research on this information) Games for Good (rpg working way up to different ranks by doing good deeds possibly linked with activism or non-profits) Brandeis App (used by brandeis students - shuttle/WBRS/menus) Mobile Multiplayer Sketch (sharing drawings and turn taking) Who’s up for (flashmobs around certain topics; who’s up for baseball!?; announcements for events; SMS) Giraffe (rubber neck adventure;  a cool kicka** videogame that a lot of people would play ; addictive) Brandeis Monopoly (realistic version of monopoly) PEN (HORSE-like game by flipping a pen by virtual/physical movements of your phone) Remember Me? (which friends live in a city; acquaintances social network) RecipeApp (insert ingredients, says what you can make with that) Virtual Tron (running around, gps sees where you are and build walls) Turn-based-starcraft tactile envtironment MMORPG for Android Realworld RPG - Games for good levels based on past participation gain ability to set goals for others advanced users can determine tasks Real world Network of ppl w/ similar interests 100 pushups a day game Brandeis mobile app Maurauders map Course planning software Tycoon game for Android Game using speech recognition/location-aware Defcon for android Portable resume In Attendence - add friend featureBrandeis events achievements Brandeis Scavenger Hunt/BucketList/Virtual items extend to other locations Settlers of Brandeis Network realy app - extend the network Paper football Assassins for Android Brandeis King of the Hill General platform for mobile multi-player Crowd-source chess/other game Protest app where you select how long/loudly your protest Group hug (flashmob) Dodgeball anywhere Activism app Yardsale app Virtual book exchange enhanced reality (superimpose book shelves) deposit books virtually Location-based anonymous chat Enhanced reality for travelers ", "tags": "", "loc": "/content/topics/projects/product_ideas/" },

        {"title": "Term Product Brief", "text": "Each product/service is required to complete a project brief and get instructors approval at the start of the first frame. This is to help assure consistency, good preparation, and a reasonable choice of product. Required Sections A Tweet length (140 chars) summary of your project (product or service) On a scale of 1(low)-10(high) how personally excited are you about this? The three team members Your current intuition about your proposed project: What is the problem is it solving? What is the  job  that your customer or user will hire this project to do for them? What can you say about what who the customer is, where you can find them, where they congregate? What form will your solution take, how will it work, what will it do? How will it be delivered to customers? What are some ways in which it might make money? What other ways might it make a positive impact on people’s lives or the world broadly speaking? What aspects of the product or the process are interesting and exciting to you? Feel free to add anything else you think is relevant. ", "tags": "", "loc": "/content/topics/projects/term_project_brief/" },

        {"title": "Term Project Framework", "text": "The purpose of the Term Project is to give you an open ended, but structured hands-on opportunity to: Apply the principles and concepts of lean startup and product discovery Think clearly about setting real goals for a product or business, whether they are to make lots of money or otherwise put a dent in the universe. Develop and practice the discipline to invest time and effort in only what is most important at any point During the  Lean Immersion  period of the course everyone will be applying Lean Startup to a product idea that I have provided. The purpose is to do a practice round without the pressure of inventing a product. The, during the second part of the course you will pursue a Term Project that you conceive of following a defined framework, which will divide the work roughly into three frames of 3 weeks each. You should expect to pivot once or twice during that phase. Challenge yourselves: We are looking for something with a potential big impact. A  big idea  that can perhaps change the world in some way. Not just a feature, but a product. Remember 9 out of 10 startups fail. If you’re doing it right, you fail fast instead of spending months and years on something that’s not gonna pan out. Our goal here is to improve those odds. There will be 3 Frames of work on the projects. At the end of eacg Frame, students will prepare and present the results of the work. Frame 1 Report Frame 2 Report Term Project Report ", "tags": "", "loc": "/content/topics/projects/term_project_framework/" },

        {"title": "Term Project How To", "text": "The Term Project forms the backbone of the second section of the term. Here is how it will work in general: Term Projects We will work in teams of 3-4 students which will be assigned by the teachers. Each team, by the end of the term, will have defined a new product or service, at least up to a point of being ready to seek funding. The content of the classroom work should be directly applicable to the project work. The team has to come up with a validated business model for a product or service with the following characteristics: it should solve a problem we believe people really have we have evidence that people would pay money to solve it our solution involves technology of some sort we should have reason to believe that the product can be built Objectives for each team Work as a team where everyone contributes. Figure out how you will be effective and make decisions. Describe and flesh out an actual product or service that you want to build. Follow a lean startup methodology to refine and test and describe the product in detail. Articulate and build your MVPs, pivot as needed Get out of the building and talk to real users and customers Prepare for a solid presentation of the product by the end of the semester Capture learnings along all the dimensions of the business model. Describe the details of the product as far as you can in a series of stories in Trello Ideation and team formation As you know, ther first segment of the course we will be learning the Lean Startup model and applying it to the Pilot Project (P2PTours). During this same time we will be talking and making lists of possible products or services for the Incubator. Ideas are developed as follows: We develop a master list of very brief product or service ideas. I have a list of ideas too that we can use to prime the pump. We discuss, we brainstorm, we prioritize and we clarify. In classes, we will discuss, debate, sort and prioritize, to discover the best ideas. As a result of this process we clarify and add detail. Each student belongs to a team of 3 or 4 students who will then debate amongst themselves to decide on the project. After this we enter into a three frame process, which will consume the balance of the term. See Term Project Framework ", "tags": "", "loc": "/content/topics/projects/term_project_how_to/" },

        {"title": "Adding basic authentication", "text": "Rails Details for Authentication References Reference: Ruby on Rails Tutorail - Chapters 6,7 and 8 Reference: AuthDemo source code Intro There are several popular gems to implement authentication Beware that the fact that there is a gem does not mean that it’s trivial You need to understand what’s going on. Advice: Avoid getting fancy with OAuth, or FB or LinkedIn log in. Start with a simple password has_secure_password Line added to top of the model representing what is logging in Might be Users, or Accounts, or whatever. The thing that logs in. Makes base assumptions about that model Database contains a field called password_digest (and does NOT contain a field called password) Implements various aspects of the authentication model Look at ./db/schema.rb ./app/models/user.rb password_digest, password, password_confirmation Database only stores password_digest Model logic supplied by has_secure_password On create: compare password, password_confirmation are equal Computed a cryptographic hash (digest) And store as password_digest User.create(email:  tim@brandeis.edu , password:  abc , password_confirmation:  abc ) User.where(email:  tim@brandeis.edu ).first.authenticate( abc ) Log in/out Displaying the log in page: see ./app/views/sessions/new.html.erb Log in is a page like any other, needs a route Will assume existance of a SessionsController with create, new and destroy actions. Check rake routes to see what routes are created 1# ./config/routes.rb 2 resources :sessions, only: [:new, :create, :destroy] sessions POST /sessions(.:format) sessions#create new_session GET /sessions/new(.:format) sessions#new session DELETE /sessions/:id(.:format) sessions#destroy Sessions Controller Tricky: Session is not a model! Session controller maps a url (route) to some code Specifically code to execute when loging in and out session#new: display login box session#create: try validate password and save  logged in status  session#destroy: reset logged_in_status Building a form of any kind form_for is a view helper. Makes it easier to generate the required html for a form. Effect of the form is to do an HTTP PUT. This is what submit does URL for that form can come from the form_for method ActiveRecord Triggers Methods that get called before, during or after key activerecord events. 1# ./app/models/user.rb 2 before_save { self.email = email.downcase } 3 before_create :create_remember_token Helpers and Remember Token Think of these as  view helpers , used in creating and working with views and controllers Remember Token Used in sessions so we don’t expose the actual ID of the user record 1# ./app/helpers/sessions_helper.rb 2 def sign_in(user) 3 remember_token = User.new_remember_token 4 cookies.permanent[:remember_token] = remember_token 5 user.update_attribute(:remember_token, User.hash(remember_token)) 6 self.current_user = user 7 end ", "tags": "", "loc": "/content/topics/rails/basic_authentication/" },

        {"title": "Demo of controllers and resources", "text": "Setup We’re going to build a simple blogging system Posts and comments Do these commands in the shell rails new resdemo rails generate scaffold Post title:string body:text rails generate scaffold Comment body:text post_id:integer rake db:migrate Review Examine db/migrations/* Examine app/models/* Examine config/routes.rb Examine app/controllers Examine app/views Routes Run rake routes Prefix Verb URI Pattern Controller#Action comments GET /comments(.:format) comments#index POST /comments(.:format) comments#create new_comment GET /comments/new(.:format) comments#new edit_comment GET /comments/:id/edit(.:format) comments#edit comment GET /comments/:id(.:format) comments#show PATCH /comments/:id(.:format) comments#update PUT /comments/:id(.:format) comments#update DELETE /comments/:id(.:format) comments#destroy posts GET /posts(.:format) posts#index POST /posts(.:format) posts#create new_post GET /posts/new(.:format) posts#new edit_post GET /posts/:id/edit(.:format) posts#edit post GET /posts/:id(.:format) posts#show PATCH /posts/:id(.:format) posts#update PUT /posts/:id(.:format) posts#update DELETE /posts/:id(.:format) posts#destroy Play with the server Run the rails server (rails server) Access these urls from your browser observe error messages, and refer to rake routes above http://0.0.0.0:3000/posts http://0.0.0.0:3000/posts/1 http://0.0.0.0:3000/comments/1 http://0.0.0.0:3000/posts/1/comments/1 Note: no nesting! Update the controllers Now we add some code for controllers and views rails generate controller Posts new create update edit destroy index show rails generate controller Comments new create update edit destroy index show Experiment with the urls again http://0.0.0.0:3000/posts/1/comments/1 Nesting still doesn’t work Nesting happens in routing Before: 1# config/routes.rb 2 resources :posts 3 resources :comments After: 1# config/routes.rb 2 resources :posts do 3 resources :comments 4 end Review results Review rake routes Illustrate what is happening by adding params.inspect in various views. ", "tags": "", "loc": "/content/topics/rails/controllers_resources/" },

        {"title": "Forms and Views", "text": "Tour of the sample code Reference containing all the code: FormDemo Feel free to look, but DON’T COPY/PASTE! I trust you otherwise why would I give you the repo? Take 10 minutes now to grab the code from github and look around Models There are 4 models Item (Has many comments) Category (Has many items) Comment (Belongs to a comment) Sample – IGNORE THIS ONE Routes Discussion: URLs, HTTP verbs and routes What’s a good URL to see all items? What’s a good URL for search? What’s a good URL for seeing a list of comments? Think again What’s a good URL for creating a comment? Let’s look at routes.rb and take turns explaining each line Rake Tips rake db:migrate:reset rake db:seed Let’s look: Migrations Nothing special going on Notice exactlhy ONE per table (at this stage of the game) Let’s look: Bootstrap Not using any gems for now!! Why is most of the Bootstrap setup in application.html.erb? Where else do we see bootstrap? Partials the _form.html.erb is a partial (view) the same body of the form is used in a new and update scenario Incorporate with render 'partial' Seed data Put enough ‘real looking’ seed data so you can get a feel for the UI seeds.rb is a regular ruby program. Look at sample code. How do Forms work? Conceptual You need a form whenever the browser needs to send data to the server <form> tag begins the group of fields. It declares the URL that payload is sent to There are zero or more fields There’s always a  submit  link or button that triggers the sending </form> terminates the group Sending always is done via some kind of HTTP request Payload is always name=value pairs, value is always text over the wire Rails There are always TWO controller actions: one to display the form one to accept the data from the form Where can I find them for items? Two controller actions means TWO urls! Display the form Let’s look at what the HTML should look like Difference between form_for and form_tag: let’s look at two examples Why is there an Item.new in the form display action (new)? Accept data from the form What URL is requested to send the data? What http verb? Why? How does the data come back from the form? What can the controller do with that data? Security issues What if the form payload is not coming from your form? What if your form has been modified inside the browser? Explain params.require() More complicated case Nested resources A comment always belongs to an item What should the URL look like to display the form to create a comment (THINK!) What is the verb? Does the form display to add a comment work differently? Using form_for vs. form_tag in this situation What would the URL look like to accept the data of the new comment? Let’s read the action and understand what it does How do you create a nested resource, i.e. a comment for item 3? Making Views DRY When you see yourself writing the same html over and over again write a helper: let’s do an example! write a partial: And let’s do another example! Summary Routes Understand the urls and verbs and how they map to controller actions Use rake routes to verify your understanding Make changes to routes.rb to get the urls and verbs you intend Forms Two actions, one to display the form, one to send the payload to the server form_for and form_tag are equally good. In real cases you end up with form_tag often Understand params and params.require Forms for nested resources Other tools helpers to generate repetitive html parials to build repetitive html rake db:migrate:reset and rake db:seeds Hacking the sample Get formdemo to run on your computer Update the new item form so it looks as pretty as the search form Update the search form so the options actually work Update the new item form so it shows a popup of categories instead of a blank ", "tags": "", "loc": "/content/topics/rails/forms_views/" },

        {"title": "Job of the Rails Server", "text": " Simply to accept HTTP requests Decode them ( routing ) Generate the necessary HTML ( views ) Return the html as a response to the request ( Controller ) ", "tags": "", "loc": "/content/topics/rails/intro_rails/" },

        {"title": "Rails Database Mechanics", "text": "Rails DB Mechanics ActiveRecord Layer in RoR which is the connection between the rails application and the underlying database For advanced designs, there are options other than Activerecord Naming Model.rb file is named singular, e.g. User Corresponding db table is plural and lower case, e.g. users Correspondences Each instance of the class (e.g. User) corresponds to a single record in the dabase When a query returns a bunch of records, you get a collection of instances of the class (this is classic Active Record model) Attributes Rails will automagically create the methods to access each field of the record in the database Different database ‘servers’ Sqllite - local database, no need for a server MySql - Standard industrial strength database, free Postgress - Becoming very popular with Rails community Migration Rails Guide: Migrations rails generate model -h rails generate migration -h Datatypes supported by Rails DB datatypes for Rails 4 Queries and other ways to access the database Validations Rails Validations Tools and notes Check out MesaSQLite Handy Rake Info: Rake  tasks  (commands) ", "tags": "", "loc": "/content/topics/rails/rails_db_mechanics/" },

        {"title": "Hands-on with Rails DBs and Models", "text": "Database schema for an event schedule Person(name, dob, gender, zipcode) Event(name, date) Registrations(person_id, event_id, status, comment) Create the database tables rails generate resource Person name:string dob:date gender:string zipcode:string rails generate resource Event name:string event_date:date event_time:time rails generate model Registration person_id:integer event_id:integer Define sample data in seeds.rb Event.create(name: 'Welcome', event_date: 'Feb 1 2014', event_time: '12:00pm') Person.create(name: 'Angelo Smith', dob: 'Jan 2, 1991', gender: 'f', zipcode: 02474) Registration.create(person_id: 3, event_id: 2) Commands relating to seeding rake db:create # creates the database for the current env rake db:seed # (only) runs the db/seed.rb file rake db:setup # runs db:schema:load, db:seed Examining the DB from the SQL console In the database console you can type classic SQL commands rails dbconsole .help .databases select * from people select * from people where id > 1 Examining the databases from the Rails console In the rails console you can type ruby commands (it’s pry) ActiveRecord::Base.connection.tables Person.all Person.where(gender: 'm') Person.where( dob > ? , Date.new(1995)) Person.where( dob > ? , Date.new(1995)).count CRUD operations (Create, Read, Update, Delete) p = Person.new(name:  Pito , dob: '12-12-2012', gender: 'f', zipcode: 12355) p.new_record? p.save p = Person.create(name:  Amin , dob: '12-12-2014', gender: 'm', zipcode: 31231) p.delete Associations, declared in models class Person < ActiveRecord::Base has_many :registrations has_many :events, through: :registrations end class Event < ActiveRecord::Base has_many :registrations has_many :people, through: :registrations end class Registration < ActiveRecord::Base belongs_to :person belongs_to :event end Association, used Person.find(1).registrations Person.where(name:  Angelo Smith ).first.registrations Event.find(1).people Validations Validations are applied by ActiveRecord, NOT the database validates :zipcode, length: { is: 5} # declared in model file p = Person.find(1) p.zipcode = 1 # assign invalid value p.valid? # explicit check p.save # Is not permitted into the database p.save! # Same but throws exception Appendices References Awesome Print ActiveRecord Associations ActiveRecord Queries ActiveRecord Queries Cribsheet ActiveRecord Validations Validations Cribsheet Gemfile gem 'pry-rails' gem 'pry' gem 'pry-debugger' gem 'pry-stack_explorer' gem 'awesome_print' gem 'hirb' ", "tags": "", "loc": "/content/topics/rails/rails_db_models/" },

        {"title": "Best Rails and Ruby Resources", "text": "Getting answers Stack Overflow: You may or may not have heard of Stack Overflow, but have you really used it? Have you looked for answers - probably yes, but have you posted questions? You will be doing both extensively during the course, so you might as well get used to it! Google Google is your friend. You know this of course. Almost any technical problem you encounter has been solved and written up by someone. Google it. Ask Mother Google. Ask The Google! Best of Rails Help Rails Guides Highly readable and concise (yet comprehensive :) guides to the most important parts of Rails. Often better than any book or manual. Rails Casts This web site contains hundreds of free screen casts that give step by step explanations on all sorts of use cases of rails. As the series has been going on for years, and has been in suspended animation since this June, you will see videos that talk about old versions of Rails and obsolete techniques. So, your mileage may vary but it’s still a great resource. Rails for Zombies Best of Ruby Help Ruby the hard way is great if you are stuck getting going with Ruby Ruby on Rails Tutorial - Another excellent Rails tutorial ", "tags": "", "loc": "/content/topics/rails/rails_resources/" },

        {"title": "Scaling", "text": "Scaling and Performance Real world example: cafeteria flow chart Optimization:the search for bottlenecks. What’s a bottleneck? Refer back to the cafeteria example. Moving target. * When you eliminate/improve one bottleneck, it just reveals the next one. * You make starting the dashboard activity faster….so that now you can notice that drawing the map overlay is slow. Important: Measurement Worse sin: Optimizing early. Why? Server Push Review architecture and why Look at code Performance Performance is what what a user experiences as  slow  or  fast  Response time to an operation initiated by the user Perception! Can you ‘fool’ the user into thinking the app is faster than it is? Feedback: spinners etc Anticipation: start doing work before user requests it Different (but intertwined with) scaling Scaling Image above is likely a scaling problem  How many X per minute can you do  (e.g. user log ins, page refreshes, notifications,… How many (users, sessions, videos, pictures, etc) does the site need to support Different from response time:  How long does it take to accomplish Y?  Related but different Scaling has to do with the load on the servers Big challenge: how fast or slow will the site or app grow? Architectural techniques apply equally scaling up vs. scaling out caching load balancing database partitioning and sharding asynchronous processing Patterns of scaling problems and solutions  Clients  = web browsers accessing the site, mobile apps accessing the site, etc. Load on the servers. Some scenarios, one or more of: Too many clients asking the server to do operation O * Individual clients asking the server to do operation P too often Operation Q is time consuming for the server to satisfy Solutions can be Add an identical server to handle operations O, P or Q Send operation O to one server and operation P to another server Why are so many clients asking for O? Can we reduce the number? What’s the reason why a client would ask for operation P so often? Can we reduce that? Is there a way to make operation Q faster to satisfy? Techniques: Caching Save the result of a request with a given set of parameters. In a future request with the same parameter (maybe) return the same result Memoization: caching applied to an individual method A basic programming technique System level caching. Storage: In ‘local’ memory In ‘remote’ memory In database In Cloud Name-value databases Very fast searches and lookups Distributed searches and distributed databases Robust across system and application failures References: Redis Memcached Amazon Elastic Cache Techniques: Asycnhronous processing Real examples: Discussion: What do all of these have in common? Account registraton confirmation emails (actually all emails) Daily (periodic or episodic) notification emails Automatic backups or archiving Image Resizing Spam checking Synchronous: Caller waits for response Asynchronous: Request returns immediately, but result comes later NB: web server mainly responds to http requests! Background processing happens even if no requests! How do processes work in a modern Operating System? Scheduler part of the OS Processes can be fairly heavy weight Let’s estimate how many background processs you would need How would you handle processes that: Were taking too long? Had crashed? Needed to be restarted? Or what if the server crashes as a whole? It’s a mess. Need abstractions! Case 1: Schedule based CRON jobs. Most elementary. Require  privileges  Alternative: Native  scheduler  application (e.g. Heroku Simple Job Scheduler) References: Heroku Simple Job Scheduler Unix Cron Creating Cron Jobs on Mac Rails Runner Case 2: Request based Request handled ‘asynchronously’ of course By local server, in a separate process By a remote server Request queueing What happens when requests come faster than we can handle them How do we add more performance in handling request References Comparing Background processing Libraries Rails Delayed Job Gem Techniques: Databases Discussion: What if all the user names are stored in one table on one server? Databases are a major bottleneck! Must move the data to more than one machine! Need to undertand the access pattern: read intensive/write intensive Database Replication What does it do What are the benefits Database Partitioning What are the different kinds: Horizontal and Vertical What does it do What are the benefits Database Sharding What does it do What are the benefits References The Basics Of Database Sharding ", "tags": "", "loc": "/content/topics/rails/scaling/" },

        {"title": "URL in Rails", "text": "Fundamental importance of the URI/URL URI =  Uniform Resource Identifier  Used to be called  Universal Resource Locator  (URL) Because the resources were files on the disk of the server And the URL’s path was really a path! Focus now on the ‘path’ part of the URI e.g. some ugly examples http://roomscheduler.com/reserve/room/3 http://bookstore/gonewiththewind/order/3 http://nyt.com/latest-updates?year=2014 e.g. some good examples http://roomscheduler.com/room/3/request http://bookstore.com/book/412/price http://tourmanager.com/city/boston/tour/tuesday/new There are many ways to structure a url RESTful style of URI design  Representational State Transfer  (See Original REST Paper) Each URI denotes a specific ‘resource’ ‘room 3’ or ‘book 412’ or ‘tuesday tours IN Boston city’ It is usually not a file but something generated ‘on the fly’ Still the same URI should yield the same resource every time (handwave) Each URI is used in combination with an HTTP  method  Get: retrieve the indicated  resource  Put: update value of the indicated resource Delete: delete the indicated resource Post: Create a new instance of indicated resource (some other, less important ones) One of the earliest design questions What do the URLs for my app look like? Conceptually, they are  directory structure-like  URLs There is a coherent  syntax  about them, e.g. http://www.myservice.org/discussion/topics/{topic} http://www.myservice.org/discussion/2008/12/10/{topic} http://www.myservice.org/discussion/{year}/{day}/{month}/{topic} Touchpoints, coming soon: rails generate resource rails routes default controllers In other words, you don’t have to follow this form of URL but… You really should follow it because a lot of things fall into place. Appendix Rails Routing Guide RESTful Web Services: The Basics ", "tags": "", "loc": "/content/topics/rails/url_rails/" },

        {"title": "README for Curriculous-topics", "text": "Repository of Topics For use with the curriculous curriculum authoring tool ", "tags": "", "loc": "/content/topics/README/" },

        {"title": "classes_tut", "text": "######## CLASS ####### # A very simple class class School def initialize(name) @name = name end end ##### INSTANCES ##### my_school = School.new( Brandeis ) my_school.class your_school = School.new( Olin College ) ##### INSTANCE VARIABLES ##### class School attr_accessor :name, :rank def initialize(name, rank) @name = name @rank = rank end def to_s  #{@name} is ranked #{@rank}  end end my_school = School.new( Brandeis , 30) your_school = School.new( Olin , 50) ##### DUCK TYPING ##### my_school.to_s puts  Inspecting my school: #{my_school.inspect}  my_school.respond_to? :inspect 1.234.respond_to? :inspect ########################## # Blocks are kind of like'anonymous methods' numbers = [1, 20, 33, -1, 11] numbers.sort numbers.sample numbers puts  first example:  numbers.each { |x| puts x} puts  \nSecond example (the same!)  numbers.each do |x| puts x end numbers.map {|x| x * 1000} numbers.reduce { |accum, val| accum + val } ", "tags": "", "loc": "/content/topics/scripts/classes_tut/" },

        {"title": "dbl_demo1", "text": "require 'minitest/autorun' class Book attr_accessor :title, :description def initialize title, author binding.pry @description =  Written by #{author.name}  end end describe Book do it  uses author's name in description  do tim_author = MiniTest::Mock.new tim_author.expect(:name,  Tim Hickey ) book = Book.new( Introduction to 3D graphics , author: tim_author) book.description.must_equal 'Written by Tim Hickey' #tim_author.verify end end", "tags": "", "loc": "/content/topics/scripts/dbl_demo1/" },

        {"title": "intro_tut", "text": "########################## # Strings, Numbers are a class 1.class # => Fixnum  Greetings .class # => String ########################## # We use  new  to create new instances a = Array.new(5) # => [nil, nil, nil, nil, nil] # We call a method by  .methodname  a.size # => 5 a.max # => nil ########################## # We do array assignments with brackets a[0] =  Truth  # =>  Truth  a[1] =  even  # =>  even  a[2] =  unto  # =>  unto  a[3] =  its  # =>  its  a[4] =  innermost  # =>  innermost  a[5] =  parts  # =>  parts  ########################## # Ruby has lots of built in methods to operate on arrays! a # => [ Truth ,  even ,  unto ,  its ,  innermost ,  parts ] a.size # => 6 a.class # => Array a.sample # =>  innermost  a.sort # => [ Truth ,  even ,  innermost ,  its ,  parts ,  unto ] ########################## # Variables are not declared, nor typed x = 100 # => 100 x =  pito  # =>  pito  y = x # =>  pito  y = true # => true x # =>  pito  ########################## # More about strings  I am a string  # =>  I am a string  'So am I' # =>  So am I  concat =  I am a string   + 'so am i' # =>  I am a string so am i  prompt =  Hello, my name is #{x}  # =>  Hello, my name is pito  prompt =  Hello, my name is #{x.capitalize}  # =>  Hello, my name is Pito  ########################## # Methods (are like functions, procedures, etc.) def greet(name) result =  Good night #{name}  # =>  Good night Pito ,  Good night Pito  return result # =>  Good night Pito ,  Good night Pito  end greet( Pito ) # =>  Good night Pito  greet  Pito  # =>  Good night Pito  # More idiomatic:! def greet name  Good night #{name}  # =>  Good night Pito ,  Good night Pito  end greet( Pito ) # =>  Good night Pito  greet  Pito  # =>  Good night Pito  ########################## # Hashes aka dictionaries (Python) who = {first:  Jon , last:  Anders , age: 12} # => {:first=> Jon , :last=> Anders , :age=>12} who[:first] # =>  Jon  who[:name] # => nil who[0] # => nil who.length # => 3 who.sort # => [[:age, 12], [:first,  Jon ], [:last,  Anders ]] require 'json' # => true puts who.to_json # => nil # >> { first : Jon , last : Anders , age :12} ", "tags": "", "loc": "/content/topics/scripts/intro_tut/" },

        {"title": "jsonexample", "text": "require 'json' puts  Convert from an array to Json:  puts [1,2,3].to_json puts  \nConvert from a hash to json:  puts ({ name:  Jonathan , birthday:  Dec 1, 1991  }.to_json) puts  \nConvert from an arbitrary class:  class Car def initialize make, model @make = make @model = model end def to_json {'make' => @make, 'model' => @model}.to_json end end c = Car.new( Toyota ,  Corlla ) puts c.to_json puts  \nAnd the other way around  name_hash = '{ name :  Pito ,  town :  Arlington }' puts JSON.parse(name_hash) name_list_hash = '[{ name :  Pito ,  town :  Arlington }, { name :  Chris ,  town :  Willemstad }, { name :  Amin ,  town :  Lafayette }]' puts JSON.parse(name_list_hash) puts  \n*** How about converting from XML to JSON?  require 'xmlsimple' xml = Pito Salas male EOS xml_clean = xml.gsub(/\s/, '') xml_hash = XmlSimple.xml_in(xml_clean , { 'ForceArray' => false }) xml_json = xml_hash.to_json puts  Input xml string: , xml_clean puts  \nConverted to a hash: , xml_hash puts  \nConverted to a json string: , xml_json ", "tags": "", "loc": "/content/topics/scripts/jsonexample/" },

        {"title": "tdd0_tut", "text": "def fact(n) if n == 1 1 else fact(n-1) * n end end if (fact(1) != 1) puts  Error when calling Factorial with 1  elsif fact(2) != 2 puts  Error when calling Factorial with 2  else puts  Factorial function works.  end ", "tags": "", "loc": "/content/topics/scripts/tdd0_tut/" },

        {"title": "tdd1_tut", "text": "require 'minitest/autorun' def fact(n) if n == 1 1 else fact(n-1) * n end end describe  factorials  do it  works for 1  do fact(1).must_equal 1 end it  works for 2  do fact(2).must_equal 2 end it  works for 20  do fact(20).must_equal 2432902008176640000 end it  works for zero  do fact(0).must_equal 0 end end ", "tags": "", "loc": "/content/topics/scripts/tdd1_tut/" },

        {"title": "tdd2_tut", "text": "require 'minitest/autorun' class PlayingCard attr_reader :rank, :suit def initialize suit:nil, rank:nil @suit = suit @rank = rank end def random @suit = [ hearts ,  spades ,  diamonds ,  clubs ].sample @rank = rand(13) self end def to_s card_to_english end def card_to_engish rank_to_english +   of   + @suit end def valid? @rank >= 1 && @rank 1 && @rank ", "tags": "", "loc": "/content/topics/scripts/tdd2_tut/" },

        {"title": "Paper Prototyping", "text": "Paper Prototyping There are many media for doing this. See lots of examples of paper prototyping here An interesting article: Paper Prototyping Advantages Very cheap which saves money But also makes it less painful when it has to be changed totally Allows a user to take over and cross things out and suggest other ideas You can take this as far as you want. Smaller snippets for the various ui widgets (e.g. drop down menus) Make a  screen flow diagram  by connecting the different sheets of paper with lines showing the transitions It is similar to a movie ‘storyboard’ Here is my example: not good UI. Comments Why I insist on ‘paper prototyping’ How ugly can it be? Fast iteration Role of the UX Flow Chart ", "tags": "", "loc": "/content/topics/UI/paper_prototyping/" },

        {"title": "Personas", "text": "Personas * Used both in market segmentation and UX design * ‘Canonical’ users described by * what they do, * how they work, * where they are, what kinds of pains they are experienceing * What ‘jobs’ they want a product or service to do for them. ", "tags": "", "loc": "/content/topics/UI/personas/" },

        {"title": "Conducting a usability test", "text": "Usability Tests Don’t guess!  Get out of the buiidling ! It’s so much easier to grab one or two or more real humans Evidence from 2 or 3 random people is often enough, but really you don’t need for than 5-10.. Can be conducted at any stage Paper prototype Online mockup or ‘wireframes’ Actual build The difference is how hard/painful it is to make changes - which is inversely proportional to how open you will be listening This could be testing a paper prototype early, when it is easy to make big modifications, or later with actual software - when it’s more difficult to make changes Preparation Decide on a task(s) for user.  Log in and post a picture ,  Check and update your privacy settings  Decide on the type(s) of users. Decide on what knowledge or assumptions they will start with (new user, experienced user, musician, programmer, etc.) Rules of thumb to follow Try to get the ‘victim’ to narrate their thought process Make sure they know that if they are confused, it is the fault of the software, not their fault If and when they get stuck, engage them in a conversation by giving them small hints Ask them for a suggestion on how it would be clearer, for example:  Let’s say you want a plain pizza and you see this screen, what would you do?   Oh you can’t decide, well tell me, what are you looking for right now on the screen?  Running the test Mistakes are ALWAYS the fault of the software not the user. Make sure they know this and don’t feel like they have to appologize when things go wrong. Don’t help. Ask them to narrate their thought process:  I am not looking for a button called security or privacy. Oh here’s one called settings, maybe that’s it. I am going to click it. Hm, I expected to find security related stuff here but instead I see…  etc. Make notes Keep it simple You don’t need a one way mirror, video recording etc etc. You don’t need 10 subjects. Usually after 2-3 you already know what the problems are ACT ON WHAT YOU LEARN! ", "tags": "", "loc": "/content/topics/UI/usability_test/" },

        {"title": "User Stories", "text": "User Stories Start a list (Trello, Google Sheet etc.) Each story is a minimal  feature  or  scenario  or  use case  We will give you feedback on the wording Keep the list in priority order Not unusual to have 50-100 stories You will not implement all of them Examples from P2PTours  App can be used without an account   Users without account can search for tourguides   User can request an account by supplying email and password   User receives email with link to confirm account   Registered user can request to be accepted as a tour guide   Request for tour guide is accompanied by a cell phone number   There is a web based administrative console   Requests for tour guide status appear in a queue on the admin console   Admin console requires a login to access  etc. Discussion: Lets brainstorm user stories for each of the term projects ", "tags": "", "loc": "/content/topics/UI/user_stories/" },

        {"title": "User Experience Basics", "text": "Examples of User Experience ‹ › Discussion: In each case, can you tell how to operate this device? And while you are trying to answer the question, be introspective, and tell me your thought process. How are you trying to find the problem, if any? [Pito’s] Rules of thumb for good User Experience Pay attention to AFFORDANCES I want to make you become aware of affordances all around you Visual (or other clues) that something can be pushed, pulled, dragged, clicked, etc. Without them user is lost Know the answer to the question: WHO IS MY USER?  Personas . Note, often there is more than one. Build on what users likely have seen before Platform consistency (iPhone, Android … but then compare with Flash. Is that a platform? How about web?) Conventions: back, home, undo, cut, paste, file menu, etc. Guide the USERS’ CONCEPTUAL MODEL (sometimes called the user metaphor) Some links: This article talks about one kind of metaphor. I mean something broader. This article has some more relevant examples. This article has some interesting examples of misunderstood and obsolete metaphors What this application or feature is about - that sets expectations? What the USER (see above) is ‘expecting’ right now? What is she ‘reaching for’ right now? Remember the importance of WORDS that match this metaphor and user expectations Metaphors can become dated and inappropriate (file save icon in MS Word is what?) Any examples? PROXIMITY Implies RELATIONSHIP Put things that relate to each other near each other and vice versa Pay attention to the Visual Hierarchy Denote hierarchy/nesting of elements: posts->comments, projects->tasks, playlists->tracks, etc. Use size (and type choice) consistently to communicate importance/role Alignment and balance are important for aesthetics Don’t user spend ANY mental energy on questions like this (see book by Steve Krug) Where am I? Where should I begin? Where did they put it? What are the most important things on this screen? Think about DISCOVERABILITY MOBILE is NOT DIFFERENT, but… Assume mobile user is distracted, brief attention span Does NOT think of device as a computer Context: What is users mindset? Where are they, in a car, in line at store, at the theatre? Screen is far smaller  Mobile First  Dealing with COMPLEXITY  Simple things should be simple to do, complex things should be possible  Principle of progressive disclosure. What controls are only available at the back panel of the device, under a little door? We all know that users don’t read manuals, right? ", "tags": "", "loc": "/content/topics/UI/ux_basics/" },

        {"title": "User Experience Flows", "text": " Article: How to create a UX flow chart NB: Read the article for the concept, no need to mimic the appearance precisely. A UX Flow is a simple extension of Paper Prototyping Instead of individual paper prototypes of individual page, we zoom out and view the product with a broader perspective Each page is connected to one or more other with an arrow labeled with the that gesture, event or command, gets the user from one to the other (e.g.  user clicks ‘resend password link’  or  email was successfully sent ) You need to be meticulous and try and cover all the cases BEFORE you start coding. Neatness is not as important as careful thinking about how the user will experience the product ", "tags": "", "loc": "/content/topics/UI/ux_flows/" },

        {"title": "UI/UX Cool Tools", "text": "Some cool tools There are lots of these. I am not saying these are the best. But don’t reinvent the wheel. Look around first! Usability Hub Paper Prototyping Helper Kit Feedback Army UI Patterns Site Free Placeholder Images Android UI Patterns ", "tags": "", "loc": "/content/topics/UI/ux_tools/" },

]};